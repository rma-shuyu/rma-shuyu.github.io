<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rma&#39;s Blog</title>
  
  <subtitle>Stay hungry, stay foolish</subtitle>
  <link href="https://rma-shuyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://rma-shuyu.github.io/"/>
  <updated>2023-07-01T09:37:27.373Z</updated>
  <id>https://rma-shuyu.github.io/</id>
  
  <author>
    <name>rma-shuyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>libvirt with dpdk-vdpa</title>
    <link href="https://rma-shuyu.github.io/2023/03/14/libvirt-with-dpdk-vdpa/"/>
    <id>https://rma-shuyu.github.io/2023/03/14/libvirt-with-dpdk-vdpa/</id>
    <published>2023-03-14T02:05:30.000Z</published>
    <updated>2023-07-01T09:37:27.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OS                               : CentOS Linux release 8.4.2105</span><br><span class="line">Kernel                           : 4.18.0-305.30.1.el8.x86_64</span><br><span class="line">qemu                             : 6.2.0</span><br><span class="line">dpdk                             : 22.11.1 </span><br><span class="line">libvirt                          : 8.0.0</span><br><span class="line">设备类型                         :  net</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="dpdk-vdpa启动"><a href="#dpdk-vdpa启动" class="headerlink" title="dpdk-vdpa启动"></a>dpdk-vdpa启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./dpdk-vdpa -c 0x2 -n 4 --socket-mem 1024,1024 \</span><br><span class="line">            -a 0000:cc:00.1,vdpa=1  -a 0000:cc:00.2,vdpa=1  \</span><br><span class="line">                -- --iface /tmp/vdpa-socket</span><br></pre></td></tr></table></figure><h2 id="libvirt-xml配置"><a href="#libvirt-xml配置" class="headerlink" title="libvirt xml配置"></a>libvirt xml配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span> <span class="attr">type</span>=<span class="string">&quot;kvm&quot;</span> <span class="attr">xmlns:qemu</span>=<span class="string">&#x27;http://libvirt.org/schemas/domain/qemu/1.0&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>vm0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uuid</span>&gt;</span>d37f5411-b296-11ed-8e6c-0c48c6c879e4<span class="tag">&lt;/<span class="name">uuid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&quot;KiB&quot;</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memoryBacking</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hugepages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">page</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;M&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hugepages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nosharepages</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">locked</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">mode</span>=<span class="string">&quot;shared&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">discard</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">memoryBacking</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">&quot;static&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span> <span class="attr">arch</span>=<span class="string">&quot;x86_64&quot;</span> <span class="attr">machine</span>=<span class="string">&quot;pc-i440fx-2.1&quot;</span>&gt;</span>hvm<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpu</span> <span class="attr">mode</span>=<span class="string">&#x27;custom&#x27;</span> <span class="attr">match</span>=<span class="string">&#x27;exact&#x27;</span> <span class="attr">check</span>=<span class="string">&#x27;full&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">model</span> <span class="attr">fallback</span>=<span class="string">&#x27;forbid&#x27;</span>&gt;</span>kvm64<span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">feature</span> <span class="attr">policy</span>=<span class="string">&#x27;require&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;x2apic&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">feature</span> <span class="attr">policy</span>=<span class="string">&#x27;require&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;hypervisor&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">features</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acpi</span>&gt;</span><span class="tag">&lt;/<span class="name">acpi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">clock</span> <span class="attr">offset</span>=<span class="string">&quot;utc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">clock</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_poweroff</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_poweroff</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_reboot</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_reboot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_crash</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_crash</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">emulator</span>&gt;</span>/root/pc-bios/qemu-system-x86_64<span class="tag">&lt;/<span class="name">emulator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">device</span>=<span class="string">&quot;disk&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">bus</span>=<span class="string">&quot;ide&quot;</span> <span class="attr">dev</span>=<span class="string">&quot;hda&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&quot;/mnt/store/vm0-centos8.4-8g-ext4-host-dmar.img&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;vhostuser&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">&#x27;00:aa:bb:cc:dd:ee&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">&#x27;unix&#x27;</span> <span class="attr">path</span>=<span class="string">&#x27;/tmp/vdpa-socket0&#x27;</span> <span class="attr">mode</span>=<span class="string">&#x27;client&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">driver</span> <span class="attr">queues</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">rx_queue_size</span>=<span class="string">&#x27;512&#x27;</span> <span class="attr">tx_queue_size</span>=<span class="string">&#x27;512&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serial</span> <span class="attr">type</span>=<span class="string">&quot;tcp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">mode</span>=<span class="string">&quot;bind&quot;</span> <span class="attr">host</span>=<span class="string">&quot;127.0.0.1&quot;</span> <span class="attr">service</span>=<span class="string">&quot;4321&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocol</span> <span class="attr">type</span>=<span class="string">&quot;telnet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">port</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">serial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">graphics</span> <span class="attr">type</span>=<span class="string">&#x27;vnc&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;5901&#x27;</span> <span class="attr">listen</span>=<span class="string">&#x27;0.0.0.0&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listen</span> <span class="attr">type</span>=<span class="string">&#x27;address&#x27;</span> <span class="attr">address</span>=<span class="string">&#x27;0.0.0.0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">graphics</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:commandline</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-L&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;/root/pc-bios&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">qemu:commandline</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h2><p>1、查看libvirt是否正常拉起vm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virsh -c qemu+tcp:///system create vm.xml</span></span><br><span class="line">Domain <span class="string">&#x27;vm0&#x27;</span> created from vm.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># virsh list</span></span><br><span class="line"> Id   Name   State</span><br><span class="line">----------------------</span><br><span class="line"> 29   vm0    running</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、ping测试<br><img src="03e2f3d08b21dc6b24565608fdd47abc9cbe6acb6bd8286f651bb44728647ad3.png" alt="图 2">  </p><h2 id="调试问题"><a href="#调试问题" class="headerlink" title="调试问题"></a>调试问题</h2><p>使用libvirt拉起vm时，ping failed<br><img src="3d9fe6c5801dcd971f82c9826d8fd9e596c0c1edd45cd42b49d299b31abe463e.png" alt="图 1">  </p><h3 id="定位过程"><a href="#定位过程" class="headerlink" title="定位过程"></a>定位过程</h3><p>1、查看/var/log/libvirt/qemu/vm0.log日志，发现存在错误日志打印，可以看到qemu启动参数需要指定<code>memory-backend-file</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2023-06-14T01:53:51.897860Z qemu-system-x86_64: Failed initializing vhost-user memory map, consider using -object memory-backend-file share=on</span><br><span class="line">2023-06-14T01:53:51.897958Z qemu-system-x86_64: vhost_set_mem_table failed: Input/output error (5)</span><br><span class="line">2023-06-14T01:53:51.912732Z qemu-system-x86_64: unable to start vhost net: 5: falling back on userspace virtio</span><br><span class="line">2023-06-14T01:53:51.949246Z qemu-system-x86_64: Failed initializing vhost-user memory map, consider using -object memory-backend-file share=on</span><br><span class="line">2023-06-14T01:53:51.949266Z qemu-system-x86_64: vhost_set_mem_table failed: Resource temporarily unavailable (11)</span><br><span class="line">2023-06-14T01:53:51.963736Z qemu-system-x86_64: unable to start vhost net: 11: falling back on userspace virtio</span><br></pre></td></tr></table></figure><p>2、查看qemu启动进程参数，发现qemu参数指定的是<code>memory-backend-ram</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root        6394       1 50 08:23 ?        00:00:47 /root/pc-bios/qemu-system-x86_64 -name guest=vm0,debug-threads=on -S -object &#123;<span class="string">&quot;qom-type&quot;</span>:<span class="string">&quot;secret&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;masterKey0&quot;</span>,<span class="string">&quot;format&quot;</span>:<span class="string">&quot;raw&quot;</span>,<span class="string">&quot;file&quot;</span>:<span class="string">&quot;/var/lib/libvirt/qemu/domain-10-vm0/master-key.aes&quot;</span>&#125; -machine pc-i440fx-2.1,usb=off,dump-guest-core=off,memory-backend=pc.ram -accel kvm -cpu kvm64,x2apic=on,hypervisor=on -m 2048 -object &#123;<span class="string">&quot;qom-type&quot;</span>:<span class="string">&quot;memory-backend-ram&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;pc.ram&quot;</span>,<span class="string">&quot;size&quot;</span>:2147483648&#125; -overcommit mem-lock=off -smp 2,sockets=2,cores=1,threads=1 -uuid d37f5411-b296-11ed-8e6c-0c48c6c879e4 -no-user-config -nodefaults -chardev socket,<span class="built_in">id</span>=charmonitor,fd=38,server=on,<span class="built_in">wait</span>=off -mon chardev=charmonitor,<span class="built_in">id</span>=monitor,mode=control -rtc base=utc -no-shutdown -boot strict=on -device piix3-usb-uhci,<span class="built_in">id</span>=usb,bus=pci.0,addr=0x1.0x2 -blockdev &#123;<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;file&quot;</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;/mnt/store/vm0-centos8.4-8g-ext4-host-dmar.img&quot;</span>,<span class="string">&quot;node-name&quot;</span>:<span class="string">&quot;libvirt-1-storage&quot;</span>,<span class="string">&quot;auto-read-only&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;discard&quot;</span>:<span class="string">&quot;unmap&quot;</span>&#125; -blockdev &#123;<span class="string">&quot;node-name&quot;</span>:<span class="string">&quot;libvirt-1-format&quot;</span>,<span class="string">&quot;read-only&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;raw&quot;</span>,<span class="string">&quot;file&quot;</span>:<span class="string">&quot;libvirt-1-storage&quot;</span>&#125; -device ide-hd,bus=ide.0,unit=0,drive=libvirt-1-format,<span class="built_in">id</span>=ide0-0-0,bootindex=1 -chardev socket,<span class="built_in">id</span>=charnet0,path=/tmp/vdpa-socket0 -netdev vhost-user,chardev=charnet0,queues=4,<span class="built_in">id</span>=hostnet0 -device virtio-net-pci,mq=on,vectors=10,rx_queue_size=512,tx_queue_size=512,netdev=hostnet0,<span class="built_in">id</span>=net0,mac=00:aa:bb:cc:<span class="built_in">dd</span>:ee,bus=pci.0,addr=0x3 -chardev socket,<span class="built_in">id</span>=charserial0,host=127.0.0.1,port=4321,telnet=on,server=on,<span class="built_in">wait</span>=off -device isa-serial,chardev=charserial0,<span class="built_in">id</span>=serial0 -audiodev &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;audio1&quot;</span>,<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;none&quot;</span>&#125; -vnc 0.0.0.0:0,audiodev=audio1 -device cirrus-vga,<span class="built_in">id</span>=video0,bus=pci.0,addr=0x2 -device virtio-balloon-pci,<span class="built_in">id</span>=balloon0,bus=pci.0,addr=0x4 -L /root/pc-bios -msg timestamp=on</span><br></pre></td></tr></table></figure><h3 id="根因分析"><a href="#根因分析" class="headerlink" title="根因分析"></a>根因分析</h3><p>qemu进程在ram_block初始化的时候根据memory-backend-xxx，其中xxx可以指定file、memfd、ram，<br>从而指定不同的内存申请方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">host_memory_backend_memory_complete(UserCreatable *uc, Error **errp)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (bc-&gt;alloc) &#123;</span><br><span class="line">        bc-&gt;alloc(backend, &amp;local_err);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当指定memory-backend-file<br>则bc-&gt;alloc = file_backend_memory_alloc</p><p>当指定memory-backend-ram<br>则bc-&gt;alloc = ram_backend_memory_alloc;</p><p>这两个主要的区别在于申请ram_block时，file_backend_memory_alloc会额外申请一个fd，用于前后端进程共享内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RAMBlock *<span class="title function_">qemu_ram_alloc_from_file</span><span class="params">(<span class="type">ram_addr_t</span> size, MemoryRegion *mr,</span></span><br><span class="line"><span class="params">                                   <span class="type">uint32_t</span> ram_flags, <span class="type">const</span> <span class="type">char</span> *mem_path,</span></span><br><span class="line"><span class="params">                                   <span class="type">bool</span> readonly, Error **errp)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    fd = file_ram_open(mem_path, memory_region_name(mr), readonly, &amp;created,</span><br><span class="line">                       errp);</span><br><span class="line">...</span><br><span class="line">    block = qemu_ram_alloc_from_fd(size, mr, ram_flags, fd, <span class="number">0</span>, readonly, errp);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemoryRegion通过vhost-user VHOST_USER_SET_MEM_TABLE消息传递到dpdk-vdpa进程<br>如果不指定memory-backend-file，VHOST_USER_SET_MEM_TABLE消息失败，在vhost_dev_start中返回失败，不会走后续设备启动流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vhost_dev_start</span><span class="params">(<span class="keyword">struct</span> vhost_dev *hdev, VirtIODevice *vdev)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    r = hdev-&gt;vhost_ops-&gt;vhost_set_mem_table(hdev, hdev-&gt;mem);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        VHOST_OPS_DEBUG(<span class="string">&quot;vhost_set_mem_table failed&quot;</span>);</span><br><span class="line">        r = -errno;</span><br><span class="line">        <span class="keyword">goto</span> fail_mem;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">     r = hdev-&gt;vhost_ops-&gt;vhost_dev_start(hdev, <span class="literal">true</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h3><p>libvirt xml指定memoryBacking类型为file</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">memoryBacking</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hugepages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">page</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;M&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hugepages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nosharepages</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">locked</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">mode</span>=<span class="string">&quot;shared&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">discard</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">memoryBacking</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时再次启动vm，可以发现此时qemu进程启动参数为<code>memory-backend-file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root       17715       1 75 23:02 ?        00:00:47 /root/pc-bios/qemu-system-x86_64 -name guest=vm0,debug-threads=on -S -object &#123;<span class="string">&quot;qom-type&quot;</span>:<span class="string">&quot;secret&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;masterKey0&quot;</span>,<span class="string">&quot;format&quot;</span>:<span class="string">&quot;raw&quot;</span>,<span class="string">&quot;file&quot;</span>:<span class="string">&quot;/var/lib/libvirt/qemu/domain-3-vm0/master-key.aes&quot;</span>&#125; -machine pc-i440fx-2.1,usb=off,dump-guest-core=off,mem-merge=off,memory-backend=pc.ram -accel kvm -cpu kvm64,x2apic=on,hypervisor=on -m 2048 -object &#123;<span class="string">&quot;qom-type&quot;</span>:<span class="string">&quot;memory-backend-file&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;pc.ram&quot;</span>,<span class="string">&quot;mem-path&quot;</span>:<span class="string">&quot;/dev/hugepages/libvirt/qemu/3-vm0&quot;</span>,<span class="string">&quot;discard-data&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;share&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;x-use-canonical-path-for-ramblock-id&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;prealloc&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;size&quot;</span>:2147483648&#125; -overcommit mem-lock=on -smp 2,sockets=2,cores=1,threads=1 -uuid d37f5411-b296-11ed-8e6c-0c48c6c879e4 -no-user-config -nodefaults -chardev socket,<span class="built_in">id</span>=charmonitor,fd=39,server=on,<span class="built_in">wait</span>=off -mon chardev=charmonitor,<span class="built_in">id</span>=monitor,mode=control -rtc base=utc -no-shutdown -boot strict=on -device piix3-usb-uhci,<span class="built_in">id</span>=usb,bus=pci.0,addr=0x1.0x2 -blockdev &#123;<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;file&quot;</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;/mnt/store/vm0-centos8.4-8g-ext4-host-dmar.img&quot;</span>,<span class="string">&quot;node-name&quot;</span>:<span class="string">&quot;libvirt-1-storage&quot;</span>,<span class="string">&quot;auto-read-only&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;discard&quot;</span>:<span class="string">&quot;unmap&quot;</span>&#125; -blockdev &#123;<span class="string">&quot;node-name&quot;</span>:<span class="string">&quot;libvirt-1-format&quot;</span>,<span class="string">&quot;read-only&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;raw&quot;</span>,<span class="string">&quot;file&quot;</span>:<span class="string">&quot;libvirt-1-storage&quot;</span>&#125; -device ide-hd,bus=ide.0,unit=0,drive=libvirt-1-format,<span class="built_in">id</span>=ide0-0-0,bootindex=1 -chardev socket,<span class="built_in">id</span>=charnet0,path=/tmp/vdpa-socket0 -netdev vhost-user,chardev=charnet0,queues=4,<span class="built_in">id</span>=hostnet0 -device virtio-net-pci,mq=on,vectors=10,rx_queue_size=512,tx_queue_size=512,netdev=hostnet0,<span class="built_in">id</span>=net0,mac=00:aa:bb:cc:<span class="built_in">dd</span>:ee,bus=pci.0,addr=0x3 -chardev socket,<span class="built_in">id</span>=charserial0,host=127.0.0.1,port=4321,telnet=on,server=on,<span class="built_in">wait</span>=off -device isa-serial,chardev=charserial0,<span class="built_in">id</span>=serial0 -audiodev &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;audio1&quot;</span>,<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;none&quot;</span>&#125; -vnc 0.0.0.0:0,audiodev=audio1 -device cirrus-vga,<span class="built_in">id</span>=video0,bus=pci.0,addr=0x2 -device virtio-balloon-pci,<span class="built_in">id</span>=balloon0,bus=pci.0,addr=0x4 -L /root/pc-bios -msg timestamp=on</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境信息&quot;&gt;&lt;a href=&quot;#环境信息&quot; class=&quot;headerlink&quot; title=&quot;环境信息&quot;&gt;&lt;/a&gt;环境信息&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OS                               : CentOS Linux release 8.4.2105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kernel                           : 4.18.0-305.30.1.el8.x86_64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qemu                             : 6.2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dpdk                             : 22.11.1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;libvirt                          : 8.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设备类型                         :  net&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="Libvirt" scheme="https://rma-shuyu.github.io/tags/Libvirt/"/>
    
  </entry>
  
  <entry>
    <title>DPDK+OVS+QEMU前后端启动vm</title>
    <link href="https://rma-shuyu.github.io/2023/03/06/DPDK-OVS-QEMU%E5%89%8D%E5%90%8E%E7%AB%AF%E5%90%AF%E5%8A%A8vm/"/>
    <id>https://rma-shuyu.github.io/2023/03/06/DPDK-OVS-QEMU%E5%89%8D%E5%90%8E%E7%AB%AF%E5%90%AF%E5%8A%A8vm/</id>
    <published>2023-03-06T08:01:04.000Z</published>
    <updated>2023-07-29T06:46:38.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li><p>DPDK 22.11.1</p></li><li><p>A DPDK supported NIC</p></li></ul><p>Only required when physical ports are in use</p><span id="more"></span><ul><li>A suitable kernel</li></ul><p>On Linux Distros running kernel version &gt;= 3.0, only IOMMU needs to enabled via the grub cmdline, assuming you are using VFIO. For older kernels, ensure the kernel is built with UIO, HUGETLBFS, PROC_PAGE_MONITOR, HPET, HPET_MMAP support. If these are not present, it will be necessary to upgrade your kernel or build a custom kernel with these flags enabled.</p><h2 id="dpdk环境设置"><a href="#dpdk环境设置" class="headerlink" title="dpdk环境设置"></a>dpdk环境设置</h2><p>检查VT-d功能是否打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cmdline | grep iommu=pt</span><br><span class="line"><span class="built_in">cat</span> /proc/cmdline | grep intel_iommu=on</span><br></pre></td></tr></table></figure><p>如果没有开启，那么需要修改/etc/default/grub中GRUB_CMDLINE_LINUX_DEFAULT，重新创建引导grub</p><p>设置大页，加载vfio，绑定物理网卡到vfio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">huge_set --setup 4g</span><br><span class="line">modprobe vfio-pci</span><br><span class="line">dpdk_bind -b vfio-pci ens33f1</span><br></pre></td></tr></table></figure><p>这里的<code>huge_set</code>、<code>dpdk_bind</code>对应dpdk bin中的<code>dpdk-devbind.py</code>、<code>dpdk-hugepages.py</code></p><h2 id="ovs启动"><a href="#ovs启动" class="headerlink" title="ovs启动"></a>ovs启动</h2><ul><li>创建ovs相关目录</li><li>第一次需要创建ovsdb</li><li>启动ovsdb-server</li><li>检查db.sock是否正常创建</li><li>设置other_config为dpdk模式</li><li>启动ovs-vswitchd</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /mnt/store/ovs/images/bin</span><br><span class="line"></span><br><span class="line">dpdk_socket_mem=<span class="string">&quot;1024,0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/run/openvswitch</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/openvswitch</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/log/openvswitch</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">test</span> -f /etc/openvswitch/conf.db; <span class="keyword">then</span></span><br><span class="line">./ovsdb-tool create /etc/openvswitch/conf.db /mnt/store/ovs/images/db/vswitch.ovsschema</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">./ovsdb-server /etc/openvswitch/conf.db -vconsole:emer -vsyslog:err -vfile:info --remote=punix:/var/run/openvswitch/db.sock --private-key=db:Open_vSwitch,SSL,private_key --certificate=db:Open_vSwitch,SSL,certificate --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert --no-chdir --log-file=/var/log/openvswitch/ovsdb-server.log --pidfile=/var/run/openvswitch/ovsdb-server.pid --detach --monitor</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ ! -S /var/run/openvswitch/db.sock ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./ovs-vsctl --no-wait <span class="built_in">set</span> Open_vSwitch . other_config:dpdk-init=<span class="literal">true</span></span><br><span class="line">./ovs-vsctl --no-wait <span class="built_in">set</span> Open_vSwitch . other_config:dpdk-extra=<span class="string">&quot;--iova-mode=pa&quot;</span></span><br><span class="line">./ovs-vsctl --no-wait <span class="built_in">set</span> Open_vSwitch . other_config:dpdk-socket-mem=<span class="variable">$dpdk_socket_mem</span></span><br><span class="line"></span><br><span class="line">./ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor</span><br></pre></td></tr></table></figure><h2 id="ovs停止运行"><a href="#ovs停止运行" class="headerlink" title="ovs停止运行"></a>ovs停止运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ovs-appctl -t ovs-vswitchd <span class="built_in">exit</span></span><br><span class="line">ovs-appctl -t ovsdb-server <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="ovs创建port"><a href="#ovs创建port" class="headerlink" title="ovs创建port"></a>ovs创建port</h2><ul><li>创建网桥</li><li>物理端口绑定网桥</li><li>前后端通信端口绑定网桥</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/mnt/store/ovs/images/bin/ovs-vsctl --may-exist add-br br0 -- <span class="built_in">set</span> bridge br0 datapath_type=netdev</span><br><span class="line"></span><br><span class="line"><span class="comment"># dpdk-devargs后面跟的是dpdk绑定网卡的pci bdf号</span></span><br><span class="line">/mnt/store/ovs/images/bin/ovs-vsctl --may-exist add-port br0 phy0 -- <span class="built_in">set</span> Interface phy0 <span class="built_in">type</span>=dpdk options:dpdk-devargs=0000:24:00.1</span><br><span class="line"></span><br><span class="line">/mnt/store/ovs/images/bin/ovs-vsctl --may-exist add-port br0 vhost-user-1 -- <span class="built_in">set</span> Interface vhost-user-1 <span class="built_in">type</span>=dpdkvhostuserclient options:vhost-server-path=<span class="string">&quot;/tmp/sock0&quot;</span></span><br></pre></td></tr></table></figure><ul><li>ovs-vsctl show查看运行结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /mnt/store/ovs/images/bin/ovs-vsctl show</span></span><br><span class="line">90ce12f9-3e63-4fff-b615-ae7e864858db</span><br><span class="line">    Bridge br0</span><br><span class="line">        datapath_type: netdev</span><br><span class="line">        Port br0</span><br><span class="line">            Interface br0</span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">        Port vhost-user-1</span><br><span class="line">            Interface vhost-user-1</span><br><span class="line">                <span class="built_in">type</span>: dpdkvhostuserclient</span><br><span class="line">                options: &#123;vhost-server-path=<span class="string">&quot;/tmp/sock0&quot;</span>&#125;</span><br><span class="line">        Port phy0</span><br><span class="line">            Interface phy0</span><br><span class="line">                <span class="built_in">type</span>: dpdk</span><br><span class="line">                options: &#123;dpdk-devargs=<span class="string">&quot;0000:24:00.1&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="qemu启动"><a href="#qemu启动" class="headerlink" title="qemu启动"></a>qemu启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">ulimit</span> -l unlimited</span><br><span class="line">/root/pc-bios/qemu-system-x86_64  \</span><br><span class="line">-enable-kvm -m 2048 -cpu host \</span><br><span class="line">-hda /mnt/store/vm0-centos8.4-8g-ext4-host-dmar.img \</span><br><span class="line">-object memory-backend-file,<span class="built_in">id</span>=mem,size=2048M,mem-path=/dev/hugepages,share=on \</span><br><span class="line">-mem-prealloc \</span><br><span class="line">-numa node,memdev=mem \</span><br><span class="line">-chardev socket,<span class="built_in">id</span>=char0,path=/tmp/sock0,server=on \</span><br><span class="line">-netdev <span class="built_in">type</span>=vhost-user,<span class="built_in">id</span>=vdpa,chardev=char0,queues=4 \</span><br><span class="line">-device virtio-net-pci,mq=on,rx_queue_size=512,tx_queue_size=512,netdev=vdpa,mac=00:aa:bb:cc:<span class="built_in">dd</span>:ee,page-per-vq=on,disable-modern=on,disable-legacy=off \</span><br><span class="line">-serial telnet:127.1:4321,server,nowait \</span><br><span class="line">-monitor stdio \</span><br><span class="line">-D ./qemu-vm0.<span class="built_in">log</span> \</span><br><span class="line">-vnc :90 -L /root/pc-bios</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ping包测试"><a href="#ping包测试" class="headerlink" title="ping包测试"></a>ping包测试</h2><p>host上网桥配置ip，端口up</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig br0 192.188.1.3/24 up</span><br></pre></td></tr></table></figure><p>geust上net口配置同网段ip，端口up</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens3 192.188.1.2/24 up</span><br></pre></td></tr></table></figure><p>vm ping host<br><img src="212553173cc3f955da5935e31ed69460df0ad4632296146b4ae845f52fe8edde.png" alt="图 1">  </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DPDK 22.11.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A DPDK supported NIC&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only required when physical ports are in use&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="DPDK" scheme="https://rma-shuyu.github.io/tags/DPDK/"/>
    
    <category term="OVS" scheme="https://rma-shuyu.github.io/tags/OVS/"/>
    
    <category term="QEMU" scheme="https://rma-shuyu.github.io/tags/QEMU/"/>
    
  </entry>
  
  <entry>
    <title>VSCode使用CodeGPT</title>
    <link href="https://rma-shuyu.github.io/2023/02/10/VSCode%E4%BD%BF%E7%94%A8CodeGPT/"/>
    <id>https://rma-shuyu.github.io/2023/02/10/VSCode%E4%BD%BF%E7%94%A8CodeGPT/</id>
    <published>2023-02-10T12:48:58.000Z</published>
    <updated>2023-07-01T09:37:27.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>CodeGPT</code>允许我们通过官方<code>OpenAI API</code>在<code>VSCode</code>中使用<code>GPT-3</code>，使得我们可以在代码编辑器拥有了<code>ChatGPT</code>。<br>借助 <code>CodeGPT</code>，我们可以生成代码、解释代码、重构代码等等。</p><span id="more"></span><h2 id="安装和设置"><a href="#安装和设置" class="headerlink" title="安装和设置"></a>安装和设置</h2><p>打开VSCode编辑器，点击扩展，然后在搜索框中输入“Code GPT”，然后点击“安装”。<br><img src="11a74d39367434d81ee6d91b62f82591270e1597d59b0237479cd9ed18ad5c4f.png" alt="图 5">  </p><p>Code GPT安装完，进到“Settings”界面，然后找到扩展下的“Code GPT”<br>CodeGPT的设置界面如下：<br><img src="79e7618f461b768065b9fea7f62b8f19727bc3c644aa6a05a332f304007086c6.png" alt="图 4">  </p><p><img src="a551258121c4603e9a22a950ebcac95490ec3ed3132b6b65998478d96b0069e0.png" alt="图 6">  </p><p>想要让CodeGPT运行起来，需要在上图的输入框处输入<a href="https://platform.openai.com/account/api-keys">OpenAI API key</a>，API key需要到OpenAI的官网生成。<br><img src="1ec8c9b392d9b9c48adef2505b45788e26fae2b55c8e30fbd6db20885f54e342.png" alt="图 7">  </p><p><strong>使用注意</strong><br>在WSL中无法使用CodeGPT，需要在Windows端使用</p><h2 id="解释代码"><a href="#解释代码" class="headerlink" title="解释代码"></a>解释代码</h2><p>选中代码，右键点击<code>Explain CodeGPT</code><br><img src="a1f348872a247c684d3eb2ee93a9801cc1a7e5094b5b4696a572c5759883d1f5.png" alt="图 1">  </p><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>在对应后缀的代码文件中描述注释，并将光标点击到文末，快捷键ctrl+shift+i<br><img src="7fef95c4a63f509a4d1ce45159b1e1a344f6ce8c991344b63d674e52fd9c108f.png" alt="图 3">  </p><h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><p>选中代码，右键点击<code>Refactor CodeGPT</code><br><img src="95d51eff9bcb3c7c2c3d03bc3b67ba6cb3e8f1da454757e2d083fae5c0f4c7b2.png" alt="图 2">  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重构后的代码</span></span><br><span class="line">wait_for_process() &#123;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="variable">$1</span>: 进程名</span></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">输入验证</span></span><br><span class="line">  if [ $# -ne 1 ]; then</span><br><span class="line">    echo &quot;Parameters incorrect&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">设置超时时间</span></span><br><span class="line">  WAIT_TIMEOUT=10</span><br><span class="line"></span><br><span class="line">  for i in $(seq 1 $WAIT_TIMEOUT); do</span><br><span class="line">    # 检索进程ID</span><br><span class="line">    proc_pid=$(pidof $1)</span><br><span class="line"></span><br><span class="line">    if [ &quot;$proc_pid&quot; != &quot;&quot; ]</span><br><span class="line">    then</span><br><span class="line">      # 进程已启动，返回</span><br><span class="line">      echo &quot;$1 started&quot;</span><br><span class="line">      return</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    echo &quot;Waiting for $1 to start&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">  done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">超时</span></span><br><span class="line">  echo &quot;Timeout waiting for $1 to start&quot;</span><br><span class="line">  exit 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;CodeGPT&lt;/code&gt;允许我们通过官方&lt;code&gt;OpenAI API&lt;/code&gt;在&lt;code&gt;VSCode&lt;/code&gt;中使用&lt;code&gt;GPT-3&lt;/code&gt;，使得我们可以在代码编辑器拥有了&lt;code&gt;ChatGPT&lt;/code&gt;。&lt;br&gt;借助 &lt;code&gt;CodeGPT&lt;/code&gt;，我们可以生成代码、解释代码、重构代码等等。&lt;/p&gt;</summary>
    
    
    
    <category term="VSCODE" scheme="https://rma-shuyu.github.io/categories/VSCODE/"/>
    
    
    <category term="CodeGPT" scheme="https://rma-shuyu.github.io/tags/CodeGPT/"/>
    
  </entry>
  
  <entry>
    <title>gitstats使用介绍</title>
    <link href="https://rma-shuyu.github.io/2022/12/05/gitstats%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://rma-shuyu.github.io/2022/12/05/gitstats%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-12-05T11:51:50.000Z</published>
    <updated>2023-01-27T12:06:26.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进一步来讲，Gitstats它是一个git仓库分析软件，它可以检查仓库并生成历史数据的统计信息。可以帮助你查看git仓库的提交状态，根据不同维度分析计算，并自动生成数据图表。<br>官网介绍：<a href="http://gitstats.sourceforge.net/">http://gitstats.sourceforge.net/</a></p><span id="more"></span><p>当前GitStats所生成统计信息常用分为如下几类：<br><strong>常规的统计</strong>：文件总数，行数，提交量，作者数。<br><strong>活跃性</strong>：每天中每小时的、每周中每天的、每周中每小时的、每年中每月的、每年的提交量。<br><strong>作者数</strong>：列举所有的作者（提交数，第一次提交日期，最近一次的提交日期），并按月和年来划分。<br><strong>文件数</strong>：按日期划分，按扩展名名划分。<br><strong>行数</strong>：按日期划分。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//mac osx</span><br><span class="line">brew install gnuplot</span><br><span class="line">//centos linux</span><br><span class="line">yum install gnuplot</span><br><span class="line">//ubuntu linux</span><br><span class="line">apt install gnuplot</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/hoxu/gitstats.git</span><br><span class="line"><span class="built_in">cd</span> gitstats</span><br><span class="line">./gitstats 你的项目的位置 生成统计的文件夹位置</span><br></pre></td></tr></table></figure><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 生成统计的文件夹位置</span><br><span class="line">python3 -m http.server 8090</span><br></pre></td></tr></table></figure><h2 id="qemu示例"><a href="#qemu示例" class="headerlink" title="qemu示例"></a>qemu示例</h2><p>如下图所示。首先，在gitstats上提供了全局的统计数据报告，包括：</p><p><strong>报告产生时间及产生所花费的时间</strong>：如花费了710秒<br><strong>报告所覆盖的时间</strong>：如2003-02-19 to 2022-12-05<br><strong>年龄</strong>：该repo的年纪，如“7230天，其中5918天是活跃天.”<br><strong>文件数及代码</strong>：如：9256个文件，3130k行代码。<br><strong>总提交数</strong>：如：99776，平均每天13.8个<br><strong>作者数</strong>：如2160，每个作者平均提交次数46.2次。<br><img src="efbe731981191bf53d5ddccfb0d2ceddc68787753068302bb6b07ae3325161c7.png" alt="图 6">  </p><p>除此之外，还包括了：</p><ol><li>时间维度的效率分析：每天中每小时的、每周中每天的、每周中每小时的、每年中每月的、每年的提交量。<br><img src="e3f27ccfddf1d938e78059ed84dbee1e10029e531785d1c35dbd64ec9fd176e4.png" alt="图 7"><br><img src="c2af9654b130fbe357f60fc7d9b0d9f688909b0fd41cc173ed06bc9609bb03db.png" alt="图 8"><br><img src="fe0f04ea5472dac1bb45ef27504cf61e91c71154babe868b1d90ae164ffa901c.png" alt="图 9"><br><img src="d8a4aee3fe667a3fe39257feb14b177fc098d0952bfb78cf7a3139ac838adb95.png" alt="图 10"><br><img src="b04a8580c65f01373f091389a9c3a7d3138acb8aaf002e9a21a5ae8b8587acf5.png" alt="图 11"><br><img src="226d67aed51a110fa818c54b82b4e74434e727c354565bcf779b19f6ba31dd55.png" alt="图 12">  </li></ol><ol start="2"><li>提交者维度的活跃度统计：列举所有的作者（提交数，第一次提交日期，最近一次的提交日期），并按月和年来划分。<br><img src="1245268c1062710ee022fb12149e82705b29e4591c0e3aacb7fd844462b8bdaf.png" alt="图 13">  </li></ol><ol start="3"><li><p>按照文件数：按日期划分，按扩展名名划分。<br><img src="1bacc00060ca63e9f239802a91e68849e4337457d9909e0754eee5fc1664a4ee.png" alt="图 14">  </p></li><li><p>根据提交行数或提交的tag来统计。<br><img src="29853f0496e7b26c4d69af48e2d863367a2c96ee70534f89698a31e3f49b03a4.png" alt="图 15">  </p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;进一步来讲，Gitstats它是一个git仓库分析软件，它可以检查仓库并生成历史数据的统计信息。可以帮助你查看git仓库的提交状态，根据不同维度分析计算，并自动生成数据图表。&lt;br&gt;官网介绍：&lt;a href=&quot;http://gitstats.sourceforge.net/&quot;&gt;http://gitstats.sourceforge.net/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="GIT" scheme="https://rma-shuyu.github.io/categories/GIT/"/>
    
    
    <category term="git" scheme="https://rma-shuyu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>centos8安装pprof</title>
    <link href="https://rma-shuyu.github.io/2022/11/22/centos8%E5%AE%89%E8%A3%85pprof/"/>
    <id>https://rma-shuyu.github.io/2022/11/22/centos8%E5%AE%89%E8%A3%85pprof/</id>
    <published>2022-11-22T12:24:34.000Z</published>
    <updated>2023-01-27T12:06:26.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是谷歌的一个linux下性能测试的小工具。可以简单快速的发现程序的性能瓶颈。</p><span id="more"></span><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/*release</span></span><br><span class="line">CentOS Linux release 8.4.2105</span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;8&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;8&quot;</span></span><br><span class="line">PLATFORM_ID=<span class="string">&quot;platform:el8&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 8&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:8&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-8&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;8&quot;</span></span><br><span class="line">CentOS Linux release 8.4.2105</span><br><span class="line">CentOS Linux release 8.4.2105</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装编译工具"><a href="#安装编译工具" class="headerlink" title="安装编译工具"></a>安装编译工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line">yum -y install make</span><br><span class="line">yum install -y autoconf automake libtool</span><br><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure><p><strong>提示</strong>：<br>安装过程中出现以下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install gcc</span></span><br><span class="line">Last metadata expiration check: 0:15:41 ago on Wed 23 Nov 2022 03:56:44 PM CST.</span><br><span class="line">Error: </span><br><span class="line"> Problem: package gcc-8.5.0-4.el8_5.x86_64 requires glibc-devel &gt;= 2.2.90-12, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libpthread.so.0, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libdl.so.2, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libm.so.6, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libresolv.so.2, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires librt.so.1, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libutil.so.1, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libBrokenLocale.so.1, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libanl.so.1, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.i686 requires libthread_db.so.1, but none of the providers can be installed</span><br><span class="line">  - package glibc-devel-2.28-164.el8.x86_64 requires glibc = 2.28-164.el8, but none of the providers can be installed</span><br><span class="line">  - glibc-2.28-164.el8.i686 has inferior architecture</span><br><span class="line">  - cannot install both glibc-2.28-164.el8.x86_64 and glibc-2.28-203.el8.x86_64</span><br><span class="line">  - package glibc-gconv-extra-2.28-203.el8.x86_64 requires glibc(x86-64) = 2.28-203.el8, but none of the providers can be installed</span><br><span class="line">  - cannot install the best candidate <span class="keyword">for</span> the job</span><br><span class="line">  - problem with installed package glibc-gconv-extra-2.28-203.el8.x86_64</span><br><span class="line">(try to add <span class="string">&#x27;--allowerasing&#x27;</span> to <span class="built_in">command</span> line to replace conflicting packages or <span class="string">&#x27;--skip-broken&#x27;</span> to skip uninstallable packages or <span class="string">&#x27;--nobest&#x27;</span> to use not only best candidate packages)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>则执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc --allowerasing</span><br></pre></td></tr></table></figure><p>可执行文件对应的安装包查找：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum whatprovides autoreconf</span><br></pre></td></tr></table></figure><p><img src="c5dd6168b78ccf54aa38d65134cb70a21c2adb250934fcf9c448d9d29d12851c.png" alt="图 26"><br>则安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y autoconf</span><br></pre></td></tr></table></figure><h2 id="安装libunwind"><a href="#安装libunwind" class="headerlink" title="安装libunwind"></a>安装libunwind</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/libunwind/libunwind/archive/v0.99.tar.gz</span><br><span class="line">tar -xvf v0.99.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libunwind-0.99</span><br><span class="line">autoreconf --force -v --install</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="安装perftools"><a href="#安装perftools" class="headerlink" title="安装perftools"></a>安装perftools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/gperftools/gperftools/releases/download/gperftools-2.6.1/gperftools-2.6.1.tar.gz</span><br><span class="line">tar -xvf gperftools-2.6.1.tar.gz </span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p><img src="e25c28feccf7bac3e0f524dec94e4a1f7f2d5db678b0fd3366351056d111b03a.png" alt="图 27">  </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这是谷歌的一个linux下性能测试的小工具。可以简单快速的发现程序的性能瓶颈。&lt;/p&gt;</summary>
    
    
    
    <category term="LINUX" scheme="https://rma-shuyu.github.io/categories/LINUX/"/>
    
    
    <category term="linux" scheme="https://rma-shuyu.github.io/tags/linux/"/>
    
    <category term="pprof" scheme="https://rma-shuyu.github.io/tags/pprof/"/>
    
  </entry>
  
  <entry>
    <title>base64编解码</title>
    <link href="https://rma-shuyu.github.io/2022/11/16/base64%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>https://rma-shuyu.github.io/2022/11/16/base64%E7%BC%96%E8%A7%A3%E7%A0%81/</id>
    <published>2022-11-16T12:16:29.000Z</published>
    <updated>2023-01-27T12:06:26.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，是一种基于<strong>64个可打印字符</strong>来表示二进制数据的方法</p><span id="more"></span><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol><li>Base64一般用于在 HTTP协议下传输二进制数据，由于 HTTP协议是文本协议，所以在HTTP协议下传输二进制数据需要将二进制数据转换为字符数据。然而直接转换是不行的。因为网络传输只能传输可打印字符，需要用Base64将不可显字符转换为可显字符</li><li>可用于将明文通过AES加密后，通过Base64将不可显的加密字符转换为可显字符</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>base64编码表<br><img src="c617678b70d6a249a3556d4a16a4d49fbd9dc22f4be59bda0d0e52450c20be76.png" alt="图 2"> </p><p>由于base64编码是将编码前的3*8位数据，分解成4个6位的数据，所以经过base64编码后的字符串长度是4的倍数。<br>但往往我们进行编码的数据长度并不是3的倍数，这就造成了“编码”后的位数不为4的倍数，</p><p>比如Brisk共5×8=40位，以6位为一组可以分为7组，这样“编码”后就有7个字符，<br>但base64编码后的字符长度应该是4的倍数，显然这里就出问题了，那么怎么办呢？<br>前面的不可以抛弃掉，所以就只有“追加”了，所以Brisk经过base64编码后的长度应该是8个字符，而第8个编码后的字符是’=’，</p><p>再比如对单个字符a进行base64编码，由于它的长度不是3的倍数，以3个字节为一组它只能分一组，再以6位为一位它只能分两组，所以经过“编码”后它的长度是2，但base64编码后的个数应该是4的倍数，所以它的长度应该是4，所以在后面补上两个‘=’,</p><p>由于一个数求余3后有三个不同的结果，0、1、2，所以在对一个数据进行base64进行编码后它的长度为： </p><ol><li><p>当进行编码的数据长度是3的倍数时，len=strlen(str_in)/3*4;</p></li><li><p>当进行编码的数据长度不是3的倍数时，len=(strlen(str_in)/3+1)*4;</p></li></ol><p>我们以Brisk这个例子来说明一下base64编码的过程。首先我们以3个字符为一组将Brisk进行分组，Brisk被氛围两组：Bri 和 sk；然后我们取出这两个分组中每个字节的ASCII码，B:66 r:114 i:105 s:115 k:107。它们对应的二进制数为  B:01000010 r:01110010 i:01101001 s:01110011 k:01101011；</p><p>第一组，我们以6位为一组对每一个3字节分组进行再分组就变成了010000 100111 001001 101001。所对应的十进制数是16 39 9 41，对应base64表中的结果是 Q n J p；</p><p>第二组，011100 110110 101100(不够补0)，所以对应的十进制数是 28 54 44，对应base64表中的结果是 c 2 s，最终结果为QnJpc2s=（因为第二组“编码”后只有三个字节）。</p><p>解码的过程是一个逆过程，我们将经过编码后的字符按4个字符为一组，然后对照base64表得到相应的十进制数，再将其通过拆分和组合，组成3个8位数据，这个数据就是解码后的数据，下面给一个c语言实现编码和解码的代码。</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">encode_string</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> * src, <span class="type">int</span> len,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">char</span> * dest, <span class="type">unsigned</span> <span class="type">char</span> * base64, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> one;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> two;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> thr;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> fou;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ( len &gt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        one = src[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        two = ( ( src[<span class="number">0</span>] &amp; <span class="number">0x03</span> ) &lt;&lt; <span class="number">4</span> ) | ( src[<span class="number">1</span>] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">        thr = ( ( src[<span class="number">1</span>] &amp; <span class="number">0x0F</span> ) &lt;&lt; <span class="number">2</span> ) | ( src[<span class="number">2</span>] &gt;&gt; <span class="number">6</span> );</span><br><span class="line">        fou = src[<span class="number">2</span>] &amp; <span class="number">0x3F</span>;</span><br><span class="line"> </span><br><span class="line">        *( dest + index++ ) = base64[one];</span><br><span class="line">        *( dest + index++ ) = base64[two];</span><br><span class="line">        *( dest + index++ ) = base64[thr];</span><br><span class="line">        *( dest + index   ) = base64[fou];</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( len == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        one = src[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        two = ( ( src[<span class="number">0</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span> ) | ( src[<span class="number">1</span>] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">        thr = ( src[<span class="number">1</span>] &amp; <span class="number">0x0F</span> ) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">        *( dest + index++ ) = base64[one];</span><br><span class="line">        *( dest + index++ ) = base64[two];</span><br><span class="line">        *( dest + index++ ) = base64[thr];</span><br><span class="line">        *( dest + index   ) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( len == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        one = src[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        two = ( src[<span class="number">0</span>] &amp; <span class="number">0x03</span> ) &lt;&lt; <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line">        *( dest + index++ ) = base64[one];</span><br><span class="line">        *( dest + index++ ) = base64[two];</span><br><span class="line">        *( dest + index++ ) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        *( dest + index   ) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;Unknow length\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">base64_encode</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> * src, <span class="type">int</span> src_len, <span class="type">char</span> * dest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> base64[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( src_len &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> step = encode_string( src, src_len, (<span class="type">unsigned</span> <span class="type">char</span> *)dest, base64, index );</span><br><span class="line"> </span><br><span class="line">        index += <span class="number">4</span>;</span><br><span class="line">        src += step;</span><br><span class="line">src_len -= step;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    *( dest + index ) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">create_array</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * <span class="built_in">array</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> index  = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( index  = <span class="number">0</span>; index &lt; <span class="number">123</span>; index += <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( index == <span class="number">0x2B</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = <span class="number">0x3E</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( index == <span class="number">0x2F</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = <span class="number">0x3F</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( index &gt;= <span class="number">0x30</span> &amp;&amp; index &lt;= <span class="number">0x39</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = <span class="number">0x34</span> + index - <span class="number">0x30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( index == <span class="number">0x3D</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = <span class="number">0x00</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( index &gt;= <span class="number">0x41</span> &amp;&amp; index &lt;= <span class="number">0x5A</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = index - <span class="number">0x41</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( index &gt;= <span class="number">0x61</span> &amp;&amp; index &lt;= <span class="number">0x7A</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = <span class="number">0x1A</span> + index - <span class="number">0x61</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *( <span class="built_in">array</span> + index ) = <span class="number">0x00</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    *( <span class="built_in">array</span> + <span class="number">123</span> ) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">decode_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * src, <span class="type">unsigned</span> <span class="type">char</span> * dest, <span class="type">unsigned</span> <span class="type">char</span> * <span class="built_in">array</span>, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> one;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> two;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> thr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( src[<span class="number">3</span>] == <span class="string">&#x27;=&#x27;</span> &amp;&amp; src[<span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        one = ( <span class="built_in">array</span>[src[<span class="number">0</span>]] &lt;&lt; <span class="number">2</span> ) | ( <span class="built_in">array</span>[src[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">        *( dest + index ) = one;</span><br><span class="line"> </span><br><span class="line">        step = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( src[<span class="number">3</span>] == <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        one = ( <span class="built_in">array</span>[src[<span class="number">0</span>]] &lt;&lt; <span class="number">2</span> ) | ( <span class="built_in">array</span>[src[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">        two = ( ( <span class="built_in">array</span>[src[<span class="number">1</span>]] &amp; <span class="number">0x0F</span> ) &lt;&lt; <span class="number">4</span> ) | ( <span class="built_in">array</span>[src[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span> );</span><br><span class="line"> </span><br><span class="line">        *( dest + index++ ) = one;</span><br><span class="line">        *( dest + index   ) = two;</span><br><span class="line"> </span><br><span class="line">        step = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        one = ( <span class="built_in">array</span>[src[<span class="number">0</span>]] &lt;&lt; <span class="number">2</span> ) | ( <span class="built_in">array</span>[src[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">        two = ( ( <span class="built_in">array</span>[src[<span class="number">1</span>]] &amp; <span class="number">0x0F</span> ) &lt;&lt; <span class="number">4</span> ) | ( <span class="built_in">array</span>[src[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span> );</span><br><span class="line">        thr = ( <span class="built_in">array</span>[src[<span class="number">2</span>]] &lt;&lt; <span class="number">6</span> ) | <span class="built_in">array</span>[src[<span class="number">3</span>]];</span><br><span class="line"> </span><br><span class="line">        *( dest + index++ ) = one;</span><br><span class="line">        *( dest + index++ ) = two;</span><br><span class="line">        *( dest + index   ) = thr;</span><br><span class="line"> </span><br><span class="line">        step = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">base64_decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * src, <span class="type">unsigned</span> <span class="type">char</span> * dest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> <span class="built_in">array</span>[<span class="number">124</span>];</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>( <span class="built_in">array</span>, <span class="number">0x00</span>, <span class="number">124</span> );</span><br><span class="line">    create_array( <span class="built_in">array</span> );</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> ( *src )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> step = decode_string( src, dest, <span class="built_in">array</span>, index );</span><br><span class="line"> </span><br><span class="line">        index += step;</span><br><span class="line">        src   += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    *( dest + index ) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *src_str = <span class="string">&quot;abcsjdhs123134&quot;</span>;</span><br><span class="line"><span class="type">int</span> src_str_len = <span class="built_in">strlen</span>(src_str);</span><br><span class="line"><span class="type">char</span> *out_buf = (<span class="type">char</span> *)<span class="built_in">malloc</span>(src_str_len * <span class="number">2</span>);</span><br><span class="line"><span class="type">char</span> *out_decode_buf = (<span class="type">char</span> *)<span class="built_in">malloc</span>(src_str_len * <span class="number">2</span>);</span><br><span class="line">base64_encode(src_str, src_str_len, out_buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;src_str:       %s\n&quot;</span>, src_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;base64_encode: %s\n&quot;</span>, out_buf);</span><br><span class="line"></span><br><span class="line">base64_decode(out_buf, out_decode_buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;base64_decode: %s\n&quot;</span>, out_decode_buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果展示<br><img src="8106a76ff5b18e8cda5e478736125efeec53fcaf86e1744cf4fe4accaaf6a38b.png" alt="图 3">  </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，是一种基于&lt;strong&gt;64个可打印字符&lt;/strong&gt;来表示二进制数据的方法&lt;/p&gt;</summary>
    
    
    
    <category term="BASE64" scheme="https://rma-shuyu.github.io/categories/BASE64/"/>
    
    
    <category term="BASE64" scheme="https://rma-shuyu.github.io/tags/BASE64/"/>
    
  </entry>
  
  <entry>
    <title>OpenSSL之AES用法</title>
    <link href="https://rma-shuyu.github.io/2022/11/16/OpenSSL%E4%B9%8BAES%E7%94%A8%E6%B3%95/"/>
    <id>https://rma-shuyu.github.io/2022/11/16/OpenSSL%E4%B9%8BAES%E7%94%A8%E6%B3%95/</id>
    <published>2022-11-16T11:20:44.000Z</published>
    <updated>2023-01-27T12:06:26.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AES是<strong>对称</strong>加密的算法，使用128、192 和 256 位密钥，将被加密数据划分为128位（16字节）一块，然后使用某种加密模式进行加密</p><p>关键词：<br><strong>块大小</strong>：16字节<br><strong>密钥长度</strong>：AES算法下，key的长度有三种：128、192和256 bits。</p><span id="more"></span><p><strong>加密模式</strong>：AES属于块加密（Block Cipher），块加密中有CBC、ECB、CTR、OFB、CFB等几种工作模式。<br><strong>填充模式</strong>：</p><ul><li>NoPadding，数据长度不对齐时使用”\0”填充，否则不填充</li><li>PKCS7Padding，假设数据长度需要填充n(n&gt;0)个字节才对齐，那么填充n个字节，每个字节都是n;如果数据本身就已经对齐了，则填充一块长度为块大小的数据，每个字节都是块大小</li><li>PKCS5Padding，PKCS7Padding的子集，块大小固定为8字节。</li></ul><p>AES加密，如果输入是16<em>n字节，NoPadding填充的情况下，输出和输入相同；有填充的情况下，输出是16</em>（n+1）。<br>如果输入不是16字节整数倍，而是大于16<em>n小于16</em>（n+1），NoPadding填充情况下（只能是CFB和OFB模式），输出和输入长度相同；其他情况下，输出长度是16*（n+1）</p><h2 id="设置加解密接口"><a href="#设置加解密接口" class="headerlink" title="设置加解密接口"></a>设置加解密接口</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><ul><li><p>函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">AES_set_encrypt_key</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *userKey, <span class="type">const</span> <span class="type">int</span> bits,</span></span><br><span class="line"><span class="params">                        AES_KEY *key)</span>;</span><br></pre></td></tr></table></figure></li><li><p>函数作用<br>设定加密用的Key</p></li><li><p>参数说明<br><code>userKey</code>： 密钥数值；<br><code>bits</code>：密钥长度，以bit为单位，如果密钥数字是16个字节，则此参数值应为128；<br><code>key</code>： AES_KEY对象指针；<br><code>返回值</code>：<br>0: 成功<br>1: userkey，key为空<br>2: 密钥长度不是128，192，256</p></li></ul><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><ul><li><p>函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">AES_set_decrypt_key</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *userKey, <span class="type">const</span> <span class="type">int</span> bits,</span></span><br><span class="line"><span class="params">                        AES_KEY *key)</span>;</span><br></pre></td></tr></table></figure></li><li><p>函数作用<br>设定解密用的Key</p></li><li><p>参数说明<br><code>userKey</code>： 密钥数值；<br><code>bits</code>：密钥长度，以bit为单位，如果密钥数字是16个字节，则此参数值应为128；<br><code>key</code>： AES_KEY对象指针；<br><code>返回值</code>：<br>0: 成功<br>1: userkey，key为空<br>2: 密钥长度不是128，192，256</p></li></ul><h2 id="常用加密模式"><a href="#常用加密模式" class="headerlink" title="常用加密模式"></a>常用加密模式</h2><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><ul><li><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AES_cbc_encrypt</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *in, <span class="type">unsigned</span> <span class="type">char</span> *out,</span></span><br><span class="line"><span class="params">                     <span class="type">size_t</span> length, <span class="type">const</span> AES_KEY *key,</span></span><br><span class="line"><span class="params">                     <span class="type">unsigned</span> <span class="type">char</span> *ivec, <span class="type">const</span> <span class="type">int</span> enc)</span>;</span><br></pre></td></tr></table></figure></li><li><p>函数作用：<br>AES加密/解密单个数据块（16个字节），CBC模式</p></li><li><p>参数说明：<br><code>in</code>： 需要加密/解密的数据；<br><code>out</code>： 计算后输出的数据；<br><code>length</code>： 数据长度（这里不包含初始向量数据长度）<br><code>key</code>：密钥<br><code>ivec</code>： 初始向量（一般为16字节全0）<br><code>enc</code>：<br>AES_ENCRYPT：代表加密<br>AES_DECRYPT：代表解密</p></li></ul><h3 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h3><ul><li><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AES_ecb_encrypt</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *in, <span class="type">unsigned</span> <span class="type">char</span> *out,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> AES_KEY *key, <span class="type">const</span> <span class="type">int</span> enc)</span>;</span><br></pre></td></tr></table></figure></li><li><p>函数作用：<br>AES加密/解密单个数据块（16个字节），ECB模式</p></li><li><p>参数说明：<br><code>in</code>: 需要加密/解密的数据；<br><code>out</code>: 计算后输出的数据；<br><code>key</code>: 密钥<br><code>enc</code>:<br>AES_ENCRYPT：代表加密<br>AES_DECRYPT：代表解密</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_ORG_DATA <span class="string">&quot;this is test aes data!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">remove_padding</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *buff, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">ch = buff[size - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; ch; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (buff[size - i] != buff[size - (i + <span class="number">1</span>)])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buff[size - i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="title function_">str2hex</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *ret = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ret = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(str_len / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str_len; i += <span class="number">2</span>)</span><br><span class="line">sret = <span class="built_in">sscanf</span>(str + i, <span class="string">&quot;%2hhX&quot;</span>, &amp;ret[i/<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span> (sret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(ret);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">decode_aes128_ecb</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *encrypt_buff, <span class="type">int</span> buf_len, <span class="type">unsigned</span> <span class="type">char</span> **out)</span></span><br><span class="line">&#123;</span><br><span class="line">AES_KEY aes;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *decrypt_buff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *key = str2hex(<span class="string">&quot;B1CFC3D787DC4511&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;aes, <span class="number">0</span>, <span class="keyword">sizeof</span>(aes));</span><br><span class="line">decrypt_buff = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>((<span class="type">size_t</span>)buf_len);</span><br><span class="line"></span><br><span class="line">AES_set_decrypt_key(key, <span class="number">128</span>, &amp;aes);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buf_len; i += AES_BLOCK_SIZE) &#123;</span><br><span class="line">AES_ecb_encrypt</span><br><span class="line">(encrypt_buff + i, decrypt_buff + i, &amp;aes, AES_DECRYPT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove_padding(decrypt_buff, buf_len);</span><br><span class="line"></span><br><span class="line">*out = decrypt_buff;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">encode_aes128_ecb</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **out, <span class="type">int</span> *out_len)</span></span><br><span class="line">&#123;</span><br><span class="line">AES_KEY aes;</span><br><span class="line"><span class="type">int</span> data_len = <span class="built_in">strlen</span>(TEST_ORG_DATA);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">json_error_t</span> error;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *encrypt_buff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *decrypt_buff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *key = str2hex(<span class="string">&quot;B1CFC3D787DC4511&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pad_len = AES_BLOCK_SIZE - (data_len % AES_BLOCK_SIZE);</span><br><span class="line">encrypt_buff = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(data_len + pad_len);</span><br><span class="line">decrypt_buff = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(data_len + pad_len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(decrypt_buff, TEST_ORG_DATA, data_len);</span><br><span class="line"><span class="built_in">memset</span>(decrypt_buff+data_len, pad_len, pad_len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;aes, <span class="number">0</span>, <span class="keyword">sizeof</span>(aes));</span><br><span class="line">AES_set_encrypt_key(key, <span class="number">128</span>, &amp;aes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; data_len+pad_len; i += AES_BLOCK_SIZE) &#123;</span><br><span class="line">AES_ecb_encrypt</span><br><span class="line">(decrypt_buff + i, encrypt_buff + i, &amp;aes, AES_ENCRYPT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*out = encrypt_buff;</span><br><span class="line">*out_len = data_len+pad_len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data before aes :\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, TEST_ORG_DATA);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *en_code = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> en_code_len;</span><br><span class="line">encode_aes128_ecb(&amp;en_code, &amp;en_code_len);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *de_code = <span class="literal">NULL</span>;</span><br><span class="line">decode_aes128_ecb(en_code, en_code_len, &amp;de_code);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data after aes encode and decode :\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, de_code);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="4f8473f4df84e1e65d147bd49af24b1cf87b702462969287d002e093c7cfd2e1.png" alt="图 2">  </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;AES是&lt;strong&gt;对称&lt;/strong&gt;加密的算法，使用128、192 和 256 位密钥，将被加密数据划分为128位（16字节）一块，然后使用某种加密模式进行加密&lt;/p&gt;
&lt;p&gt;关键词：&lt;br&gt;&lt;strong&gt;块大小&lt;/strong&gt;：16字节&lt;br&gt;&lt;strong&gt;密钥长度&lt;/strong&gt;：AES算法下，key的长度有三种：128、192和256 bits。&lt;/p&gt;</summary>
    
    
    
    <category term="OPENSSL" scheme="https://rma-shuyu.github.io/categories/OPENSSL/"/>
    
    
    <category term="AES" scheme="https://rma-shuyu.github.io/tags/AES/"/>
    
    <category term="OPENSSL" scheme="https://rma-shuyu.github.io/tags/OPENSSL/"/>
    
  </entry>
  
  <entry>
    <title>用户态驱动vfio</title>
    <link href="https://rma-shuyu.github.io/2022/06/14/%E7%94%A8%E6%88%B7%E6%80%81%E9%A9%B1%E5%8A%A8vfio/"/>
    <id>https://rma-shuyu.github.io/2022/06/14/%E7%94%A8%E6%88%B7%E6%80%81%E9%A9%B1%E5%8A%A8vfio/</id>
    <published>2022-06-14T12:02:04.000Z</published>
    <updated>2023-07-29T06:46:38.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>将硬件设备寄存器映射至用户态</li><li>iommu</li><li>在用户态处理中断<span id="more"></span></li></ul><h2 id="用户态使用vfio"><a href="#用户态使用vfio" class="headerlink" title="用户态使用vfio"></a>用户态使用vfio</h2><h3 id="启动Vt-d功能"><a href="#启动Vt-d功能" class="headerlink" title="启动Vt-d功能"></a>启动Vt-d功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/cmdline</span></span><br><span class="line">BOOT_IMAGE=(hd0,msdos1)/vmlinuz-4.18.0-305.30.1.jmnd2.el8.x86_64 root=UUID=3e50617c-bb11-4b9f-9313-4d070fd14fbc ro crashkernel=auto console=tty0,edd=off intel_iommu=on iommu=pt pci=realloc</span><br></pre></td></tr></table></figure><h3 id="modprobe-vfio-pci"><a href="#modprobe-vfio-pci" class="headerlink" title="modprobe vfio-pci"></a>modprobe vfio-pci</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lsmod | grep vfio</span></span><br><span class="line">vfio_pci               61440  0</span><br><span class="line">vfio_virqfd            16384  1 vfio_pci</span><br><span class="line">vfio_iommu_type1       36864  0</span><br><span class="line">vfio                   36864  2 vfio_iommu_type1,vfio_pci</span><br><span class="line">irqbypass              16384  2 vfio_pci,kvm</span><br></pre></td></tr></table></figure><p>上述命令将加载vfio_pci.ko, vfio_virqfd.ko, vfio_iommu_type1.ko, vfio.ko内核模块</p><h3 id="绑定设备到vfio-pci"><a href="#绑定设备到vfio-pci" class="headerlink" title="绑定设备到vfio-pci"></a>绑定设备到vfio-pci</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> vfio-pci &gt; /sys/bus/pci/devices/<span class="variable">$1</span>/driver_override</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> &gt; /sys/bus/pci/devices/<span class="variable">$1</span>/driver/unbind</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> &gt; /sys/bus/pci/drivers_probe</span><br></pre></td></tr></table></figure><h2 id="dpdk中通过vfio映射设备空间"><a href="#dpdk中通过vfio映射设备空间" class="headerlink" title="dpdk中通过vfio映射设备空间"></a>dpdk中通过vfio映射设备空间</h2><ol><li>获取设备所在的iommu group</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">rte_pci_device_name(&amp;dev-&gt;addr, devname, RTE_DEV_NAME_MAX_LEN);</span><br><span class="line">ret = rte_vfio_get_group_num(rte_pci_get_sysfs_path(), devname,</span><br><span class="line">     &amp;iommu_group_num);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>rte_vfio_get_group_num内部实现为，获取sys下设备文件的iommu_group</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># readlink /sys/bus/pci/devices/0000\:24\:00.1/iommu_group</span></span><br><span class="line">../../../../kernel/iommu_groups/40</span><br></pre></td></tr></table></figure><p>在bash下可以通过lspci查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lspci -s 0000:24:00.1 -vv | grep IOMMU</span><br><span class="line">IOMMU group: 40</span><br></pre></td></tr></table></figure><ol start="2"><li>创建container，open /dev/vfio/vfio</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">    vfio_container_fd = rte_vfio_container_create();</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>内部实现为，打开设备文件vfio，最大64个container</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VFIO_CONTAINER_PATH <span class="string">&quot;/dev/vfio/vfio&quot;</span></span></span><br><span class="line">....</span><br><span class="line">    vfio_container_fd = open(VFIO_CONTAINER_PATH, O_RDWR);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><ol start="3"><li>将iommu_group_num绑定到container</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VFIO_CONTAINER_PATH <span class="string">&quot;/dev/vfio/vfio&quot;</span></span></span><br><span class="line">....</span><br><span class="line">vfio_group_fd =</span><br><span class="line">rte_vfio_container_group_bind(vfio_container_fd, iommu_group_num);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>以vfio_container_fd为key找到全局数组vfio_cfgs元素，</p><p>打开/dev/vfio/group_num设备文件，获取vfio_group_fd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VFIO_GROUP_FMT <span class="string">&quot;/dev/vfio/%u&quot;</span></span></span><br><span class="line">....</span><br><span class="line"><span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename),</span><br><span class="line"> VFIO_GROUP_FMT, iommu_group_num);</span><br><span class="line">vfio_group_fd = open(filename, O_RDWR);</span><br></pre></td></tr></table></figure><p>比如：<br>vfio_group_fd = open(“/dev/vfio/40”, O_RDWR)<br>其中40为iommu_group_num</p><p>将iommu_group_num和vfio_group_fd设置到vfio_container_fd对应的vfio_cfgs</p><ol start="4"><li>映射设备空间</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">rte_pci_map_device(dev)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>4.1、rte_vfio_setup_device<br>/* add group to a container */<br>ret = ioctl(vfio_group_fd, VFIO_GROUP_SET_CONTAINER,<br>        &amp;vfio_container_fd)</p><p>4.2、vfio_set_iommu_type<br>int ret = ioctl(vfio_container_fd, VFIO_SET_IOMMU,<br>        t-&gt;type_id);</p><p>4.3、VFIO_GROUP_GET_DEVICE_FD<br>*vfio_dev_fd = ioctl(vfio_group_fd, VFIO_GROUP_GET_DEVICE_FD, dev_addr);<br>这个dev_addr为pci的bdf号</p><p>4.4、通过*vfio_dev_fd访问设备空间<br>ret = ioctl(*vfio_dev_fd, VFIO_DEVICE_GET_INFO, device_info);</p><p>把vfio_dev_fd看成一个文件，这个文件的内容包含了设备的所有可访问资源，这包括中断，pci配置空间，扩展配置空间，6个bar空间。这些不同的资源可以看做是文件不同偏移基址处的一段文件内容(region)，可以像读写普通文件一样读写这些资源。6个bar空间对应的region属于可映射区域，可以使用mmap将其映射进用户态空间进行读写，而其他资源则不可映射，只能通过read/write系统调用经内核进行间接的读写。设备的pci配置空间属于不可映射区域，只能read/write系统调用经内核进行间接的读写。</p><h2 id="访问PCI配置空间"><a href="#访问PCI配置空间" class="headerlink" title="访问PCI配置空间"></a>访问PCI配置空间</h2><p>遍历每个bar</p><ol><li>获取region信息</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">ret = pci_vfio_get_region_info(vfio_dev_fd, &amp;reg, i);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>其内部实现为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = ioctl(vfio_dev_fd, VFIO_DEVICE_GET_REGION_INFO, ri);</span><br></pre></td></tr></table></figure><ol start="2"><li>检查该region是否可map</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line"><span class="comment">/* skip non-mmappable BARs */</span></span><br><span class="line"><span class="keyword">if</span> ((reg-&gt;flags &amp; VFIO_REGION_INFO_FLAG_MMAP) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">free</span>(reg);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><ol start="3"><li>mmap到用户空间</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">bar_addr = mmap(bar-&gt;addr, bar-&gt;size, <span class="number">0</span>, MAP_PRIVATE |</span><br><span class="line">MAP_ANONYMOUS | additional_flags, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="IOMMU"><a href="#IOMMU" class="headerlink" title="IOMMU"></a>IOMMU</h2><h3 id="DMA-remap"><a href="#DMA-remap" class="headerlink" title="DMA remap"></a>DMA remap</h3><p>guest安全隔离的进行真实设备的DMA，将gpa映射到hpa<br>VFIO_IOMMU_MAP_DMA：将 iova 通过 IOMMU 映射到 vaddr 对应的物理地址上去<br>其中，iova代表gpa，vaddr代表hva</p><p>下面描述一下qemu作为前端，dpdk作为后端时，iommu的过程</p><ol><li>qemu通过VHOST_USER_SET_MEM_TABLE将将gpa，size，mmap的fd带给dpdk</li></ol><p><code>vhost_user_set_mem_table</code></p><ol start="2"><li>dpdk mmap 得到hva，并且这一块与qemu共享内存</li></ol><p><code>vhost_user_mmap_region</code></p><ol start="3"><li>将hva和gpa通过ioctl 发送VFIO_IOMMU_MAP_DMA命令带给kernel，完成gpa到hpa的映射</li></ol><p><code>rte_vfio_container_dma_map</code><br>    <code>vfio_dma_mem_map</code><br>        <code>vfio_type1_dma_mem_map</code><br>            <code>VFIO_IOMMU_MAP_DMA</code></p><h3 id="中断remap"><a href="#中断remap" class="headerlink" title="中断remap"></a>中断remap</h3><p>主要作用是通过ioctl命令<code>VFIO_DEVICE_SET_IRQS</code>将eventfd绑定到vfio，用户态即可epoll轮询此eventfd<br>用户态驱动创建一个eventfd，并在vfio中将中断绑定此eventfd，这样一旦vfio内核中的中断处理函数收到中断就会触发eventfd变为可读。用户态驱动epoll此eventfd，即可收到中断通知。<br>用户态中断，以dpdk为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">pci_vfio_setup_interrupts(dev, vfio_dev_fd)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>内部实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">    fd = eventfd(<span class="number">0</span>, EFD_NONBLOCK | EFD_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        RTE_LOG(ERR, EAL, <span class="string">&quot;Cannot set up eventfd, error &quot;</span></span><br><span class="line">                <span class="string">&quot;%i (%s)\n&quot;</span>, errno, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">irq_set = (<span class="keyword">struct</span> vfio_irq_set *)irq_set_buf;</span><br><span class="line">irq_set-&gt;argsz = <span class="keyword">sizeof</span>(irq_set_buf);</span><br><span class="line">irq_set-&gt;count = nr_vring + <span class="number">1</span>;</span><br><span class="line">irq_set-&gt;flags = VFIO_IRQ_SET_DATA_EVENTFD |</span><br><span class="line"> VFIO_IRQ_SET_ACTION_TRIGGER;</span><br><span class="line">irq_set-&gt;index = VFIO_PCI_MSIX_IRQ_INDEX;</span><br><span class="line">irq_set-&gt;start = <span class="number">0</span>;</span><br><span class="line">fd_ptr = (<span class="type">int</span> *)&amp;irq_set-&gt;data;</span><br><span class="line"><span class="comment">/* The first interrupt is for the configure space change notification */</span></span><br><span class="line">fd_ptr[RTE_INTR_VEC_ZERO_OFFSET] =</span><br><span class="line">rte_intr_fd_get(jmvd-&gt;pdev-&gt;intr_handle);</span><br><span class="line"></span><br><span class="line">ret = ioctl(jmvd-&gt;vfio_dev_fd, VFIO_DEVICE_SET_IRQS, irq_set);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">DRV_LOG(ERR, <span class="string">&quot;Error enabling MSI-X interrupts: %s&quot;</span>,</span><br><span class="line">strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将硬件设备寄存器映射至用户态&lt;/li&gt;
&lt;li&gt;iommu&lt;/li&gt;
&lt;li&gt;在用户态处理中断&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="DPDK" scheme="https://rma-shuyu.github.io/categories/DPDK/"/>
    
    
    <category term="vfio" scheme="https://rma-shuyu.github.io/tags/vfio/"/>
    
  </entry>
  
  <entry>
    <title>DPDK vhost处理流程</title>
    <link href="https://rma-shuyu.github.io/2022/06/13/DPDK-vhost%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
    <id>https://rma-shuyu.github.io/2022/06/13/DPDK-vhost%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</id>
    <published>2022-06-13T12:46:12.000Z</published>
    <updated>2023-07-29T06:46:38.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rte_eal_init</span><br><span class="line"></span><br><span class="line">    rte_bus_probe</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rte_vdev_bus.probe</span><br><span class="line">    rte_vdev_init</span><br><span class="line">        vdev_probe_all_drivers</span><br><span class="line">                rte_pmd_vhost_probe</span><br><span class="line">                    eth_dev_vhost_create</span><br><span class="line">                        rte_vhost_driver_start</span><br><span class="line">                                1)fdset_event_dispatch thread</span><br><span class="line">                                1) 区分server（vhost_user_start_server）</span><br><span class="line">                                    还是client（vhost_user_start_client)</span><br></pre></td></tr></table></figure><h2 id="dpdk-为server"><a href="#dpdk-为server" class="headerlink" title="dpdk 为server"></a>dpdk 为server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vhost_user_start_server</span><br><span class="line"></span><br><span class="line">       vhost_user_server_new_connection</span><br><span class="line"></span><br><span class="line">              fdset_add (vhost_user_read_cb)</span><br><span class="line"></span><br><span class="line">                     vhost_user_read_cb</span><br><span class="line"></span><br><span class="line">                            vhost_user_msg_handler 消息处理</span><br></pre></td></tr></table></figure><h2 id="dpdk-为client"><a href="#dpdk-为client" class="headerlink" title="dpdk 为client"></a>dpdk 为client</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vhost_user_start_client</span><br><span class="line"></span><br><span class="line">       vhost_user_connect_nonblock</span><br><span class="line"></span><br><span class="line">              vhost_user_add_connection</span><br><span class="line"></span><br><span class="line">                     fdset_add (vhost_user_read_cb)</span><br><span class="line"></span><br><span class="line">                            vhost_user_read_cb</span><br><span class="line"></span><br><span class="line">                                   vhost_user_msg_handler 消息处理</span><br></pre></td></tr></table></figure><h2 id="消息处理流程"><a href="#消息处理流程" class="headerlink" title="消息处理流程"></a>消息处理流程</h2><p>vhost_user_msg_handler</p><p>1）read_vhost_message → read_fd_message →  recvmsg</p><p>2） 获取request = msg.request.master</p><p>3）根据vhost_message_handlers 结构处理消息</p><p>4）处理 post_msg_handle</p><p>5）send_vhost_reply 返回处理结果</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;初始化流程&quot;&gt;&lt;a href=&quot;#初始化流程&quot; class=&quot;headerlink&quot; title=&quot;初始化流程&quot;&gt;&lt;/a&gt;初始化流程&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rte_eal_init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rte_bus_probe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="DPDK" scheme="https://rma-shuyu.github.io/categories/DPDK/"/>
    
    
    <category term="DPDK" scheme="https://rma-shuyu.github.io/tags/DPDK/"/>
    
  </entry>
  
  <entry>
    <title>qemu chardev启动</title>
    <link href="https://rma-shuyu.github.io/2022/06/12/qemu-chardev%E5%90%AF%E5%8A%A8/"/>
    <id>https://rma-shuyu.github.io/2022/06/12/qemu-chardev%E5%90%AF%E5%8A%A8/</id>
    <published>2022-06-12T09:46:12.000Z</published>
    <updated>2023-07-29T06:46:38.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qemu-vhost-处理流程"><a href="#Qemu-vhost-处理流程" class="headerlink" title="Qemu vhost 处理流程"></a>Qemu vhost 处理流程</h2><p>初始化流程<br>启动参数 例如 <code>-chardev socket,id=char1,path=/tmp/sock1,server</code></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/root/pc-bios/qemu-system-x86_64  \</span><br><span class="line">        -enable-kvm -m 2048 -smp 4 -cpu host \</span><br><span class="line">        -hda /mnt/store/vm0-centos8.4-8g-ext4-host-dmar.img \</span><br><span class="line">        -object memory-backend-file,<span class="built_in">id</span>=mem,size=2048M,mem-path=/dev/hugepages,share=on \</span><br><span class="line">        -mem-prealloc \</span><br><span class="line">        -numa node,memdev=mem \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char0,path=/tmp/vdpa-socket8 \</span><br><span class="line">        -netdev <span class="built_in">type</span>=vhost-user,<span class="built_in">id</span>=vdpa0,chardev=char0,queues=4 \</span><br><span class="line">        -device virtio-net-pci,mq=on,rx_queue_size=512,tx_queue_size=512,netdev=vdpa0,page-per-vq=on \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char1,path=/tmp/vdpa-socket9 \</span><br><span class="line">        -netdev <span class="built_in">type</span>=vhost-user,<span class="built_in">id</span>=vdpa1,chardev=char1,queues=4 \</span><br><span class="line">        -device virtio-net-pci,mq=on,rx_queue_size=512,tx_queue_size=512,netdev=vdpa1,page-per-vq=on \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char2,path=/tmp/vdpa-socket10 \</span><br><span class="line">        -netdev <span class="built_in">type</span>=vhost-user,<span class="built_in">id</span>=vdpa2,chardev=char2,queues=4 \</span><br><span class="line">        -device virtio-net-pci,mq=on,rx_queue_size=512,tx_queue_size=512,netdev=vdpa2,page-per-vq=on \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char3,path=/tmp/vdpa-socket11 \</span><br><span class="line">        -netdev <span class="built_in">type</span>=vhost-user,<span class="built_in">id</span>=vdpa3,chardev=char3,queues=4 \</span><br><span class="line">        -device virtio-net-pci,mq=on,rx_queue_size=512,tx_queue_size=512,netdev=vdpa3,page-per-vq=on \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char_data0,path=/tmp/vdpa-socket0,reconnect=1 \</span><br><span class="line">        -device vhost-user-blk-pci,<span class="built_in">id</span>=blk.0,chardev=char_data0,num-queues=2 \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char_data1,path=/tmp/vdpa-socket1,reconnect=1 \</span><br><span class="line">        -device vhost-user-blk-pci,<span class="built_in">id</span>=blk.1,chardev=char_data1,num-queues=2 \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char_data2,path=/tmp/vdpa-socket2,reconnect=1 \</span><br><span class="line">        -device vhost-user-blk-pci,<span class="built_in">id</span>=blk.2,chardev=char_data2,num-queues=2 \</span><br><span class="line">        -chardev socket,<span class="built_in">id</span>=char_data3,path=/tmp/vdpa-socket3,reconnect=1 \</span><br><span class="line">        -device vhost-user-blk-pci,<span class="built_in">id</span>=blk.3,chardev=char_data3,num-queues=2 \</span><br><span class="line">        -serial telnet:127.1:4321,server,nowait \</span><br><span class="line">        -monitor stdio \</span><br><span class="line">        -D ./qemu-vm0.<span class="built_in">log</span> \</span><br><span class="line">        -vnc :90 -L /root/pc-bios \</span><br><span class="line">        -incoming tcp:0:6666</span><br></pre></td></tr></table></figure><h2 id="参数启动过程"><a href="#参数启动过程" class="headerlink" title="参数启动过程"></a>参数启动过程</h2><p>如果qemu作为server，则调用栈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">qemu_init-&gt;</span><br><span class="line">    qemu_opts_foreach-&gt;</span><br><span class="line">        chardev_init_func -&gt;</span><br><span class="line">            qemu_chr_new_from_opts -&gt;</span><br><span class="line">                qemu_chardev_new -&gt;</span><br><span class="line">                    chardev_new -&gt;</span><br><span class="line">                        qemu_char_open-&gt;</span><br><span class="line">                            qmp_chardev_open_socket-&gt;</span><br><span class="line">                                qmp_chardev_open_socket_server-&gt;</span><br><span class="line">                                        tcp_chr_accept_server_sync -&gt;</span><br><span class="line">                                            qio_net_listener_wait_client -&gt;</span><br><span class="line">                                            等待客户连接（GMainContext）</span><br></pre></td></tr></table></figure><p>如果qemu作为client，则调用栈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">qemu_init</span><br><span class="line">    qemu_create_early_backends</span><br><span class="line">        qemu_opts_foreach</span><br><span class="line">            chardev_init_func</span><br><span class="line">                qemu_chr_new_from_opts</span><br><span class="line">                    qemu_chardev_new</span><br><span class="line">                        chardev_new</span><br><span class="line">                            qemu_char_open</span><br><span class="line">                                qmp_chardev_open_socket</span><br><span class="line">                                    qmp_chardev_open_socket_client</span><br></pre></td></tr></table></figure><h3 id="连接事件处理"><a href="#连接事件处理" class="headerlink" title="连接事件处理"></a>连接事件处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tcp_chr_new_client -&gt;</span><br><span class="line">    tcp_chr_connect -&gt;</span><br><span class="line">            update_ioc_handlers-&gt; tcp_chr_read,tcp_chr_read_poll</span><br><span class="line">                tcp_chr_read -&gt;</span><br><span class="line">                    tcp_chr_recv-&gt;</span><br><span class="line">                        qio_channel_readv_full -&gt;</span><br><span class="line">                            ioc_klass-&gt;io_readv -&gt;</span><br><span class="line">                                    qio_channel_socket_readv- &gt;</span><br><span class="line">                                        recvmsg</span><br></pre></td></tr></table></figure><h2 id="消息处理流程"><a href="#消息处理流程" class="headerlink" title="消息处理流程"></a>消息处理流程</h2><h3 id="net"><a href="#net" class="headerlink" title="net"></a>net</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">qemu_init</span><br><span class="line">    qemu_create_late_backends</span><br><span class="line">        net_init_clients</span><br><span class="line">            qemu_opts_foreach</span><br><span class="line">                net_client_init</span><br><span class="line">                    net_init_vhost_user</span><br><span class="line">                        qemu_chr_fe_set_handlers</span><br><span class="line">                            qemu_chr_be_event</span><br><span class="line">                                net_vhost_user_event</span><br><span class="line">                                    vhost_user_start</span><br><span class="line">                                        vhost_net_init</span><br><span class="line">                                            vhost_dev_init</span><br></pre></td></tr></table></figure><h3 id="blk"><a href="#blk" class="headerlink" title="blk"></a>blk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">qemu_init</span><br><span class="line">    qmp_x_exit_preconfig</span><br><span class="line">        qemu_opts_foreach</span><br><span class="line">            device_init_func</span><br><span class="line">                qdev_device_add</span><br><span class="line">                    qdev_realize</span><br><span class="line">                        virtio_pci_dc_realize</span><br><span class="line">                            virtio_pci_realize</span><br><span class="line">                                vhost_user_blk_pci_realize</span><br><span class="line">                                    virtio_device_realize</span><br><span class="line">                                        vhost_user_blk_device_realize</span><br><span class="line">                                            vhost_user_blk_connect</span><br><span class="line">                                                vhost_dev_init</span><br></pre></td></tr></table></figure><h2 id="vhost初始化流程"><a href="#vhost初始化流程" class="headerlink" title="vhost初始化流程"></a>vhost初始化流程</h2><h3 id="vhost-dev-init"><a href="#vhost-dev-init" class="headerlink" title="vhost_dev_init"></a>vhost_dev_init</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vhost_dev_init -&gt;</span><br><span class="line"></span><br><span class="line">      vhost_set_backend_type -&gt;</span><br><span class="line"></span><br><span class="line">          1) vhost_backend_init</span><br><span class="line"></span><br><span class="line">          2) vhost_set_owner</span><br><span class="line"></span><br><span class="line">          3) vhost_get_features</span><br><span class="line"></span><br><span class="line">          4) vhost_virtqueue_init</span><br></pre></td></tr></table></figure><h3 id="vhost-dev-start"><a href="#vhost-dev-start" class="headerlink" title="vhost_dev_start"></a>vhost_dev_start</h3><p>guest驱动加载后，vm exit到qemu的vcpu线程处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">qemu_thread_start</span><br><span class="line">    kvm_vcpu_thread_fn</span><br><span class="line">        kvm_cpu_exec</span><br><span class="line">            kvm_handle_io</span><br><span class="line">                address_space_rw</span><br><span class="line">                    memory_region_dispatch_write</span><br><span class="line">                        access_with_adjusted_size</span><br><span class="line">                            memory_region_write_accessor</span><br><span class="line">                                virtio_pci_config_write</span><br><span class="line">                                    virtio_ioport_write</span><br><span class="line">                                        virtio_set_status</span><br><span class="line">                                            vhost_user_blk_set_status</span><br><span class="line">                                                vhost_user_blk_start</span><br><span class="line">                                                    vhost_dev_start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vhost_dev_start -&gt;</span><br><span class="line"></span><br><span class="line">    1) vhost_dev_set_features</span><br><span class="line"></span><br><span class="line">    2) vhost_set_mem_table</span><br><span class="line"></span><br><span class="line">    3) vhost_virtqueue_start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    vhost_virtqueue_start -&gt;</span><br><span class="line"></span><br><span class="line">       1) vhost_ops-&gt;vhost_get_vq_index</span><br><span class="line"></span><br><span class="line">       2) vhost_ops-&gt;vhost_set_vring_num</span><br><span class="line"></span><br><span class="line">       3) vhost_ops-&gt;vhost_set_vring_base</span><br><span class="line"></span><br><span class="line">       4) vhost_memory_map</span><br><span class="line"></span><br><span class="line">       5) vhost_ops-&gt;vhost_set_vring_kick</span><br><span class="line"></span><br><span class="line">vhost_virtqueue_start-&gt;</span><br><span class="line"></span><br><span class="line">    dev-&gt;vhost_ops-&gt;vhost_set_vring_num -&gt;</span><br><span class="line"></span><br><span class="line">        vhost_user_set_vring_num -&gt;</span><br><span class="line"></span><br><span class="line">            vhost_set_vring--&gt; 设置msg ,发送 vhost_user_write -&gt;</span><br><span class="line"></span><br><span class="line">                qemu_chr_fe_write_all-&gt;</span><br><span class="line"></span><br><span class="line">                    qemu_chr_write -&gt;</span><br><span class="line"></span><br><span class="line">                    qemu_chr_write_buffer--&gt;</span><br><span class="line"></span><br><span class="line">                        ChardevClass 的 chr_write 方法其他的方法类似。</span><br></pre></td></tr></table></figure><p>vhost_user.VhostUserState.CharBackend 如何定义的？</p><p>启动参数<br>-chardev socket,id=char1,path=$NETSOCK1,server</p><p>-netdev type=vhost-user,id=hostnet1,queues=$QPS,chardev=char1</p><p>chardev 通过名字char1 查找到chardev 的到相关的操作。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Qemu-vhost-处理流程&quot;&gt;&lt;a href=&quot;#Qemu-vhost-处理流程&quot; class=&quot;headerlink&quot; title=&quot;Qemu vhost 处理流程&quot;&gt;&lt;/a&gt;Qemu vhost 处理流程&lt;/h2&gt;&lt;p&gt;初始化流程&lt;br&gt;启动参数 例如 &lt;code&gt;-chardev socket,id=char1,path=/tmp/sock1,server&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="qemu" scheme="https://rma-shuyu.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>qemu&amp;kvm io交互</title>
    <link href="https://rma-shuyu.github.io/2022/06/11/qemu-kvm-io%E4%BA%A4%E4%BA%92/"/>
    <id>https://rma-shuyu.github.io/2022/06/11/qemu-kvm-io%E4%BA%A4%E4%BA%92/</id>
    <published>2022-06-11T09:46:12.000Z</published>
    <updated>2023-07-29T06:46:38.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="qemu初始化"><a href="#qemu初始化" class="headerlink" title="qemu初始化"></a>qemu初始化</h2><p>main函数通过调用kvm_init 和 machine-&gt;init来初始化kvm。 其中, machine-&gt;init会创建vcpu, 用一个线程去模拟vcpu, 该线程执行的函数为kvm_vcpu_thread_fn, 并且该线程调用kvm_cpu_exec,该函数调用kvm_vcpu_ioctl切换到kvm中,下次从kvm中返回时,会接着执行kvm_vcpu_ioctl之后的代码,判断exit_reason,然后进行相应处理。</p><span id="more"></span><h2 id="qemu的io处理流程"><a href="#qemu的io处理流程" class="headerlink" title="qemu的io处理流程"></a>qemu的io处理流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start_thread</span><br><span class="line">    qemu_thread_start</span><br><span class="line">        kvm_vcpu_thread_fn</span><br><span class="line">            kvm_cpu_exec</span><br><span class="line">                kvm_vcpu_ioctl</span><br><span class="line">                    ioctl</span><br></pre></td></tr></table></figure><p>这里ioctl切换到kvm中，并且阻塞直到有io事件<br>Guest执行io指令 -&gt; 发生vmexit-&gt; 返回qemu -&gt; 处理io</p><h2 id="kvm的io处理流程"><a href="#kvm的io处理流程" class="headerlink" title="kvm的io处理流程"></a>kvm的io处理流程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handle_io</span><span class="params">(<span class="keyword">struct</span> kvm_vcpu *vcpu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> exit_qualification;</span><br><span class="line">    <span class="type">int</span> size, in, <span class="built_in">string</span>;</span><br><span class="line">    <span class="type">unsigned</span> port;</span><br><span class="line"></span><br><span class="line">    exit_qualification = vmcs_readl(EXIT_QUALIFICATION);  <span class="comment">//获取exit qualification</span></span><br><span class="line">    <span class="built_in">string</span> = (exit_qualification &amp; <span class="number">16</span>) != <span class="number">0</span>; <span class="comment">//判断是否为string io (ins, outs)</span></span><br><span class="line">    in = (exit_qualification &amp; <span class="number">8</span>) != <span class="number">0</span>; <span class="comment">//判断io方向，是in  还是out</span></span><br><span class="line"></span><br><span class="line">    ++vcpu-&gt;stat.io_exits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span> || in) <span class="comment">//如果是输入类的指令，或者是string io，就进入emulator处理</span></span><br><span class="line">            <span class="keyword">return</span> emulate_instruction(vcpu, <span class="number">0</span>) == EMULATE_DONE;</span><br><span class="line"></span><br><span class="line">    port = exit_qualification &gt;&gt; <span class="number">16</span>; <span class="comment">//得到端口号</span></span><br><span class="line">    size = (exit_qualification &amp; <span class="number">7</span>) + <span class="number">1</span>; <span class="comment">//大小</span></span><br><span class="line">    skip_emulated_instruction(vcpu); <span class="comment">//跳过这个指令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kvm_fast_pio_out(vcpu, size, port); <span class="comment">//进行out操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、out指令虚拟：虚拟单个out指令，在KVM中可以直接把out的数据返回给qemu，qemu完成out操作。</p><p>流程：KVM的handle_io-&gt;kvm_fast_pio_out-&gt;emulator_pio_out_emulated后面是vcpu-&gt;arch.pio.count = 0函数中非string类型的 out操作可以一步完成，所以从qemu处理完返回kvm后不需要再进入emulator。在emulator_pio_out_emulated中，将IO数据memcpy到kvm和qemu共享buffer中，然后emulator_pio_in_out，将相应数据保存到kvm_run中就返回到qemu的kvm_cpu_exec的switch看run-&gt;exit_reason，如果是KVM_EXIT_IO则进入kvm_handle_io中和设备交互。</p><p>qemu代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">kvm_cpu_exec</span><span class="params">(CPUState *cpu)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    trace_kvm_run_exit(cpu-&gt;cpu_index, run-&gt;exit_reason);</span><br><span class="line">    <span class="keyword">switch</span> (run-&gt;exit_reason) &#123;</span><br><span class="line">    <span class="keyword">case</span> KVM_EXIT_IO:</span><br><span class="line">        DPRINTF(<span class="string">&quot;handle_io\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* Called outside BQL */</span></span><br><span class="line">        kvm_handle_io(run-&gt;io.port, attrs,</span><br><span class="line">                        (<span class="type">uint8_t</span> *)run + run-&gt;io.data_offset,</span><br><span class="line">                        run-&gt;io.direction,</span><br><span class="line">                        run-&gt;io.size,</span><br><span class="line">                        run-&gt;io.count);</span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、String或in指令虚拟：如果是in指令，qemu只能把得到的数据写到kvm_run中，kvm必须在下一次vmentry的时候，将qemu得到的数据放到相应的位置，所以，在handle_io中，如果是in或者string指令，没有调用skip_emulated_instruction，这样，在qemu完成in或者一次out之后，还会在同样的地方发生vmexit，这样再由emulator完成相应的处理，针对string类型的指令，emulator会进行解码等操作，确认io的次数和源操作数、目的操作数等。</p><p>流程：handle_io-&gt;emulate_instruction-&gt;x86_emulate_instruction对指令的decode，在过程中会调用到em_in和em_out（这两个函数最后调用的emulator_pio_in_emulated中先通过和上面PIO一样的函数emulator_pio_in_out，正确返回表明qemu已经将模拟出的数据返回到参数val了，则可直接memcpy完成具体的将从qemu中得到的数据写到正确位置vcpu-&gt;arch.pio_data），设置如果是out，下次到KVM时直接进入emulator，如果是in，注册vcpu-&gt;arch.complete_userspace_io = complete_emulated_pio;需要在下次qemu进入kvm的时候，完成io，实际上就是将qemu得到的数据写到正确的位置。下次进入kvm，如果要完成in指令，会在函数kvm_arch_vcpu_ioctl_run中调用注册的complete_emulated_pio会再次调用emulate_instruction将数据写到正确位置（这次不用解码，而是直接em_in）。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;qemu初始化&quot;&gt;&lt;a href=&quot;#qemu初始化&quot; class=&quot;headerlink&quot; title=&quot;qemu初始化&quot;&gt;&lt;/a&gt;qemu初始化&lt;/h2&gt;&lt;p&gt;main函数通过调用kvm_init 和 machine-&amp;gt;init来初始化kvm。 其中, machine-&amp;gt;init会创建vcpu, 用一个线程去模拟vcpu, 该线程执行的函数为kvm_vcpu_thread_fn, 并且该线程调用kvm_cpu_exec,该函数调用kvm_vcpu_ioctl切换到kvm中,下次从kvm中返回时,会接着执行kvm_vcpu_ioctl之后的代码,判断exit_reason,然后进行相应处理。&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="qemu" scheme="https://rma-shuyu.github.io/tags/qemu/"/>
    
    <category term="kvm" scheme="https://rma-shuyu.github.io/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>libvirt操作前端虚机</title>
    <link href="https://rma-shuyu.github.io/2022/06/10/libvirt%E6%93%8D%E4%BD%9C%E5%89%8D%E7%AB%AF%E8%99%9A%E6%9C%BA/"/>
    <id>https://rma-shuyu.github.io/2022/06/10/libvirt%E6%93%8D%E4%BD%9C%E5%89%8D%E7%AB%AF%E8%99%9A%E6%9C%BA/</id>
    <published>2022-06-10T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="virsh-create"><a href="#virsh-create" class="headerlink" title="virsh create"></a>virsh create</h2><p>xml配置</p><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span> <span class="attr">type</span>=<span class="string">&quot;kvm&quot;</span> <span class="attr">xmlns:qemu</span>=<span class="string">&#x27;http://libvirt.org/schemas/domain/qemu/1.0&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>vm0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uuid</span>&gt;</span>d37f5411-b296-11ed-8e6c-0c48c6c879e4<span class="tag">&lt;/<span class="name">uuid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&quot;KiB&quot;</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">&quot;static&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span> <span class="attr">arch</span>=<span class="string">&quot;x86_64&quot;</span> <span class="attr">machine</span>=<span class="string">&quot;pc-i440fx-2.1&quot;</span>&gt;</span>hvm<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">features</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acpi</span>&gt;</span><span class="tag">&lt;/<span class="name">acpi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">clock</span> <span class="attr">offset</span>=<span class="string">&quot;utc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">clock</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_poweroff</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_poweroff</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_reboot</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_reboot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_crash</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_crash</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">emulator</span>&gt;</span>/home/corsica-sim/qemu-system-x86_64-vdpa<span class="tag">&lt;/<span class="name">emulator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">device</span>=<span class="string">&quot;disk&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">bus</span>=<span class="string">&quot;ide&quot;</span> <span class="attr">dev</span>=<span class="string">&quot;hda&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&quot;/home/centos8.4-vm0.qcow2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">driver</span> <span class="attr">type</span>=<span class="string">&quot;qcow2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;qemu&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;vdpa&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span> <span class="attr">dev</span>=<span class="string">&#x27;/dev/vhost-vdpa-3&#x27;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memballoon</span> <span class="attr">model</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;balloon0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x08&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">memballoon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serial</span> <span class="attr">type</span>=<span class="string">&quot;tcp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">mode</span>=<span class="string">&quot;bind&quot;</span> <span class="attr">host</span>=<span class="string">&quot;127.0.0.1&quot;</span> <span class="attr">service</span>=<span class="string">&quot;4319&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocol</span> <span class="attr">type</span>=<span class="string">&quot;telnet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">port</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">serial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:commandline</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-cpu&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;host&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-net&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;nic&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-net&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;user,hostfwd=tcp::5022-:22&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">qemu:commandline</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span> <span class="attr">type</span>=<span class="string">&quot;kvm&quot;</span> <span class="attr">xmlns:qemu</span>=<span class="string">&#x27;http://libvirt.org/schemas/domain/qemu/1.0&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>vm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uuid</span>&gt;</span>d37f5411-b296-11ed-8e6c-0c48c6c879e5<span class="tag">&lt;/<span class="name">uuid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&quot;KiB&quot;</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">&quot;static&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span> <span class="attr">arch</span>=<span class="string">&quot;x86_64&quot;</span> <span class="attr">machine</span>=<span class="string">&quot;pc-i440fx-2.1&quot;</span>&gt;</span>hvm<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">features</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acpi</span>&gt;</span><span class="tag">&lt;/<span class="name">acpi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">clock</span> <span class="attr">offset</span>=<span class="string">&quot;utc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">clock</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_poweroff</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_poweroff</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_reboot</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_reboot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on_crash</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_crash</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">emulator</span>&gt;</span>/home/corsica-sim/qemu-system-x86_64-vdpa<span class="tag">&lt;/<span class="name">emulator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">device</span>=<span class="string">&quot;disk&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">bus</span>=<span class="string">&quot;ide&quot;</span> <span class="attr">dev</span>=<span class="string">&quot;hda&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&quot;/home/centos8.4-vm1.qcow2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">driver</span> <span class="attr">type</span>=<span class="string">&quot;qcow2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;qemu&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;vdpa&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span> <span class="attr">dev</span>=<span class="string">&#x27;/dev/vhost-vdpa-4&#x27;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">memballoon</span> <span class="attr">model</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;balloon0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x08&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">memballoon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serial</span> <span class="attr">type</span>=<span class="string">&quot;tcp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">mode</span>=<span class="string">&quot;bind&quot;</span> <span class="attr">host</span>=<span class="string">&quot;127.0.0.1&quot;</span> <span class="attr">service</span>=<span class="string">&quot;4329&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">protocol</span> <span class="attr">type</span>=<span class="string">&quot;telnet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">port</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">serial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:commandline</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-cpu&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;host&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-net&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;nic&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-net&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;user,hostfwd=tcp::6022-:22&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">qemu:commandline</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vm创建"><a href="#vm创建" class="headerlink" title="vm创建"></a>vm创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system create vm0.xml</span></span><br><span class="line"><span class="comment">#./virsh -c qemu+tcp:///system create vm1.xml</span></span><br></pre></td></tr></table></figure><h2 id="telnet登录，配置dhclient"><a href="#telnet登录，配置dhclient" class="headerlink" title="telnet登录，配置dhclient"></a>telnet登录，配置dhclient</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 4319</span><br><span class="line">telnet 127.0.0.1 4329</span><br></pre></td></tr></table></figure><p>用户名密码：root/root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># telnet 127.0.0.1 4319</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line"></span><br><span class="line">CentOS Linux 8</span><br><span class="line">Kernel 4.18.0-305.30.1.jmnd2.el8.x86_64 on an x86_64</span><br><span class="line"></span><br><span class="line">Activate the web console with: systemctl <span class="built_in">enable</span> --now cockpit.socket</span><br><span class="line"></span><br><span class="line">148-VM0 login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Thu Mar  2 13:56:03 from 10.0.2.2</span><br><span class="line">[root@148-VM0 ~]<span class="comment"># </span></span><br><span class="line">[root@148-VM0 ~]<span class="comment"># dhclient</span></span><br><span class="line">[root@148-VM0 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># telnet 127.0.0.1 4329</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line"></span><br><span class="line">CentOS Linux 8</span><br><span class="line">Kernel 4.18.0-305.30.1.jmnd2.el8.x86_64 on an x86_64</span><br><span class="line"></span><br><span class="line">Activate the web console with: systemctl <span class="built_in">enable</span> --now cockpit.socket</span><br><span class="line"></span><br><span class="line">VM1 login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Thu Mar  9 20:16:06 from 10.0.2.2</span><br><span class="line">[root@VM1 ~]<span class="comment"># dhclient</span></span><br><span class="line">[root@VM1 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@127.1 -p 5022</span><br><span class="line">ssh root@127.1 -p 6022</span><br></pre></td></tr></table></figure><h2 id="virsh-list"><a href="#virsh-list" class="headerlink" title="virsh list"></a>virsh list</h2><h1 id="virsh-c-qemu-tcp-system-list"><a href="#virsh-c-qemu-tcp-system-list" class="headerlink" title="./virsh -c qemu+tcp:///system list"></a>./virsh -c qemu+tcp:///system list</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> Id   Name   State</span><br><span class="line">----------------------</span><br><span class="line"> 2    vm0    running</span><br><span class="line"> 3    vm1    running</span><br></pre></td></tr></table></figure><h2 id="virsh-detach-device"><a href="#virsh-detach-device" class="headerlink" title="virsh detach-device"></a>virsh detach-device</h2><p>xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;vdpa&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">dev</span>=<span class="string">&#x27;/dev/vhost-vdpa-3&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;vdpa&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">dev</span>=<span class="string">&#x27;/dev/vhost-vdpa-4&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="virsh-detach-device-1"><a href="#virsh-detach-device-1" class="headerlink" title="virsh detach-device"></a>virsh detach-device</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system detach-device vm0 vdpa-3.xml</span></span><br><span class="line">Device detached successfully</span><br></pre></td></tr></table></figure><p>查看vm0上ens7已被detach<br><img src="b213bca99c7fabc492eef79969743956c4964253c7aa94dd17233ba5442dff06.png" alt="图 1">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system detach-device vm1 vdpa-4.xml</span></span><br><span class="line">Device detached successfully</span><br></pre></td></tr></table></figure><p>查看vm1上ens7已被detach<br><img src="5eeaf596a3267386efc98c323c9c31d4dd479baef6899690bf2195b1ea86c608.png" alt="图 2">  </p><h2 id="virsh-attach-device"><a href="#virsh-attach-device" class="headerlink" title="virsh attach-device"></a>virsh attach-device</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system attach-device vm0 vdpa-3.xml</span></span><br><span class="line">Device attached successfully</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system attach-device vm1 vdpa-4.xml</span></span><br><span class="line">Device attached successfully</span><br></pre></td></tr></table></figure><p><img src="655b0b1cd2cc8ebf30538a7cf872e22971fa9b1cf022146d5e547d81771528bc.png" alt="图 3"><br><img src="f062b248bdbac0dfc9dbe9290413a955e5a51078395aa8b1fe8849bfc64483f5.png" alt="图 4">  </p><h2 id="virsh-destroy"><a href="#virsh-destroy" class="headerlink" title="virsh destroy"></a>virsh destroy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system destroy vm0</span></span><br><span class="line">Domain <span class="string">&#x27;vm0&#x27;</span> destroyed</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system destroy vm1</span></span><br><span class="line">Domain <span class="string">&#x27;vm1&#x27;</span> destroyed</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./virsh -c qemu+tcp:///system list</span></span><br><span class="line"> Id   Name   State</span><br><span class="line">--------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;virsh-create&quot;&gt;&lt;a href=&quot;#virsh-create&quot; class=&quot;headerlink&quot; title=&quot;virsh create&quot;&gt;&lt;/a&gt;virsh create&lt;/h2&gt;&lt;p&gt;xml配置&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="Libvirt" scheme="https://rma-shuyu.github.io/tags/Libvirt/"/>
    
  </entry>
  
  <entry>
    <title>virsh常用命令</title>
    <link href="https://rma-shuyu.github.io/2022/06/09/virsh%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://rma-shuyu.github.io/2022/06/09/virsh%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-06-09T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="virsh常用命令选项"><a href="#virsh常用命令选项" class="headerlink" title="virsh常用命令选项"></a>virsh常用命令选项</h2><span id="more"></span><table>    <tr>        <th>命令选项</th><th>描述</th>    </tr>    <tr>        <td>virsh create xmlfile.xml</td><td>从 XML 配置文件创建和启动访客</td>    </tr>    <tr>        <td>virsh list --all</td><td>列示主机上的所有访客</td>    </tr>    <tr>        <td>virsh dumpxml guest_name</td><td>以输出文件的形式创建访客的 XML 配置文件</td>    </tr>    <tr>        <td>virsh start guest_name</td><td>启动处于不活动状态的访客</td>    </tr>    <tr>        <td>virsh destroy guest_name</td><td>立即停止该访客</td>    </tr>    <tr>        <td>virsh define xmlfile.xml</td><td>从 XML 配置文件创建访客。该访客未启动</td>    </tr>    <tr>        <td>virsh reboot guest_name</td><td>重新启动该访客</td>    </tr>    <tr>        <td>virsh resume guest_name</td><td>恢复已暂停的访客</td>    </tr>    <tr>        <td>virsh undefine guest_name</td><td>删除该访客</td>    </tr>    <tr>        <td>virsh suspend guest_name</td><td>暂停该访客</td>    </tr>    <tr>        <td>virsh attach-device guest_name device.xml</td><td>设备热插</td>    </tr>    <tr>        <td>virsh detach-device guest_name device.xml</td><td>设备热拔</td>    </tr>    <tr>        <td>virsh qemu-monitor-command vm</td><td>qmp命令</td>    </tr></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;virsh常用命令选项&quot;&gt;&lt;a href=&quot;#virsh常用命令选项&quot; class=&quot;headerlink&quot; title=&quot;virsh常用命令选项&quot;&gt;&lt;/a&gt;virsh常用命令选项&lt;/h2&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="Libvirt" scheme="https://rma-shuyu.github.io/tags/Libvirt/"/>
    
  </entry>
  
  <entry>
    <title>Libvirt源码编译</title>
    <link href="https://rma-shuyu.github.io/2022/06/08/Libvirt%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://rma-shuyu.github.io/2022/06/08/Libvirt%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</id>
    <published>2022-06-08T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码路径"><a href="#源码路径" class="headerlink" title="源码路径"></a>源码路径</h2><p><a href="https://download.libvirt.org/libvirt-8.3.0.tar.xz">https://download.libvirt.org/libvirt-8.3.0.tar.xz</a></p><span id="more"></span><h2 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">option(<span class="string">&#x27;no_git&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;boolean&#x27;</span>, value: <span class="literal">false</span>, description: <span class="string">&#x27;Disable git submodule update&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;packager&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;Extra packager name&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;packager_version&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;Extra packager version&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;system&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;boolean&#x27;</span>, value: <span class="literal">false</span>, description: <span class="string">&#x27;Set install paths to system ones&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;runstatedir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;State directory for temporary sockets, pid files, etc&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;expensive_tests&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;set the default for enabling expensive tests (long timeouts)&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;test_coverage&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;boolean&#x27;</span>, value: <span class="literal">false</span>, description: <span class="string">&#x27;turn on code coverage instrumentation&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;git_werror&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use -Werror if building from GIT&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;rpath&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;auto&#x27;</span>, description: <span class="string">&#x27;whether to include rpath information in installed binaries and libraries&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;docdir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;documentation installation directory&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;docs&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;whether to generate documentation&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;tests&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;whether to build tests&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># build dependencies options</span></span><br><span class="line">option(<span class="string">&#x27;apparmor&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;apparmor support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;attr&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;attr support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;audit&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;audit support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;bash_completion&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;bash-completion support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;bash_completion_dir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;directory containing bash completion scripts&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;blkid&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;blkid support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;capng&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;cap-ng support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;curl&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;curl support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;fuse&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;fuse support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;glusterfs&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;glusterfs support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;libiscsi&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;libiscsi support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;libnl&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;libnl support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;libpcap&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;libpcap support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;libssh&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;libssh support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;libssh2&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;libssh2 support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;netcf&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;netcf support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;nls&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;nls support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;numactl&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;numactl support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;openwsman&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;openwsman support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;pciaccess&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;pciaccess support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;polkit&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use PolicyKit for UNIX socket access checks&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;readline&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;readline support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;sanlock&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;sanlock support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;sasl&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;sasl support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;selinux&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;selinux support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;selinux_mount&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;set SELinux mount point&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;udev&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;udev support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;wireshark_dissector&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;wireshark support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;wireshark_plugindir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;wireshark plugins directory for use when installing wireshark plugin&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;yajl&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;enabled&#x27;</span>, description: <span class="string">&#x27;yajl support&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># build driver options</span></span><br><span class="line">option(<span class="string">&#x27;driver_bhyve&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;bhyve driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_esx&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;esx driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_hyperv&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Hyper-V driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_interface&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;host interface driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_libvirtd&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;enabled&#x27;</span>, description: <span class="string">&#x27;libvirtd driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_libxl&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;libxenlight driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_lxc&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Linux Container driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_ch&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Cloud-Hypervisor driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;ch_user&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;username to run Cloud-Hypervisor system instance as&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;ch_group&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;groupname to run Cloud-Hypervisor system instance as&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_network&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;virtual network driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_openvz&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;OpenVZ driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_qemu&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;enabled&#x27;</span>, description: <span class="string">&#x27;QEMU/KVM driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;qemu_user&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;username to run QEMU system instance as&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;qemu_group&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;groupname to run QEMU system instance as&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;qemu_moddir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;set the directory where QEMU modules are located&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;qemu_datadir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;set the directory where QEMU shared data is located&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_remote&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;enabled&#x27;</span>, description: <span class="string">&#x27;remote driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;remote_default_mode&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;combo&#x27;</span>, choices: [<span class="string">&#x27;legacy&#x27;</span>, <span class="string">&#x27;direct&#x27;</span>], value: <span class="string">&#x27;direct&#x27;</span>, description: <span class="string">&#x27;remote driver default mode&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_secrets&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;local secrets management driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_test&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;test driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_vbox&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;VirtualBox XPCOMC driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;vbox_xpcomc_dir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;Location of directory containing VirtualBox XPCOMC library&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_vmware&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;VMware driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;driver_vz&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Virtuozzo driver&#x27;</span>)</span><br><span class="line"></span><br><span class="line">option(<span class="string">&#x27;secdriver_apparmor&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use AppArmor security driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;apparmor_profiles&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;install apparmor profiles&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;secdriver_selinux&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use SELinux security driver&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># storage driver options</span></span><br><span class="line">option(<span class="string">&#x27;storage_dir&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;directory backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_disk&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;GPartd Disk backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_fs&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;FileSystem backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_gluster&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Gluster backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_iscsi&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;iscsi backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_iscsi_direct&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;iscsi-direct backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_lvm&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;LVM backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_mpath&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;mpath backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_rbd&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;RADOS Block Device backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_scsi&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;SCSI backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_sheepdog&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Sheepdog backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_vstorage&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;Virtuozzo storage backend for the storage driver&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;storage_zfs&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;ZFS backend for the storage driver&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># build feature options</span></span><br><span class="line">option(<span class="string">&#x27;chrdev_lock_files&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;location for UUCP style lock files for character devices (leave empty for default paths on some platforms)&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;dtrace&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use dtrace for static probing&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;firewalld&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;firewalld support&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;firewalld_zone&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;whether to install firewalld libvirt zone&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;host_validate&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;build virt-host-validate&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;init_script&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;combo&#x27;</span>, choices: [<span class="string">&#x27;systemd&#x27;</span>, <span class="string">&#x27;openrc&#x27;</span>, <span class="string">&#x27;check&#x27;</span>, <span class="string">&#x27;none&#x27;</span>], value: <span class="string">&#x27;check&#x27;</span>, description: <span class="string">&#x27;Style of init script to install&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;loader_nvram&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;Pass list of pairs of &lt;loader&gt;:&lt;nvram&gt; paths. Both pairs and list items are separated by a colon.&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;login_shell&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;build virt-login-shell&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;nss&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;enable Name Service Switch plugin for resolving guest IP addresses&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;numad&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use numad to manage CPU placement dynamically&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;pm_utils&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;disabled&#x27;</span>, description: <span class="string">&#x27;use pm-utils for power management&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;sysctl_config&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;feature&#x27;</span>, value: <span class="string">&#x27;enabled&#x27;</span>, description: <span class="string">&#x27;Whether to install sysctl configs&#x27;</span>)</span><br><span class="line">option(<span class="string">&#x27;tls_priority&#x27;</span>, <span class="built_in">type</span>: <span class="string">&#x27;string&#x27;</span>, value: <span class="string">&#x27;NORMAL&#x27;</span>, description: <span class="string">&#x27;set the default TLS session priority string&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">CUR_PATH=$(<span class="built_in">dirname</span> $(<span class="built_in">readlink</span> -f <span class="string">&quot;<span class="variable">$0</span>&quot;</span>))</span><br><span class="line"></span><br><span class="line">INSTALL_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/libvirt_install_dir</span><br><span class="line">VERSION=8.3.0</span><br><span class="line">SRC_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/libvirt-<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;INSTALL_PATH&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;SRC_PATH&#125;</span></span><br><span class="line"><span class="built_in">rm</span> -rf build</span><br><span class="line">meson build --prefix=<span class="variable">$INSTALL_PATH</span> --debug</span><br><span class="line">meson compile -C build -j `grep -c ^processor /proc/cpuinfo`</span><br><span class="line">meson install -C build</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;源码路径&quot;&gt;&lt;a href=&quot;#源码路径&quot; class=&quot;headerlink&quot; title=&quot;源码路径&quot;&gt;&lt;/a&gt;源码路径&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://download.libvirt.org/libvirt-8.3.0.tar.xz&quot;&gt;https://download.libvirt.org/libvirt-8.3.0.tar.xz&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="Libvirt" scheme="https://rma-shuyu.github.io/tags/Libvirt/"/>
    
  </entry>
  
  <entry>
    <title>openstack组件介绍</title>
    <link href="https://rma-shuyu.github.io/2022/06/07/openstack%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://rma-shuyu.github.io/2022/06/07/openstack%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-06-07T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件类型"><a href="#组件类型" class="headerlink" title="组件类型"></a>组件类型</h2><p>openstack部署分为控制节点和计算节点，一般有1个控制节点多个计算节点。</p><span id="more"></span><p>控制节点上的主要组件有：keystone  glance nova  neutron  horizon cinder<br>计算节点上的主要组件：nova  neutron  cinder<br><img src="a1a6fc9dc098219581c92a10d164f95b1a1352ec0b386c0b79d348ddf2e66095.png" alt="图 1">  </p><h2 id="组件间交互机制"><a href="#组件间交互机制" class="headerlink" title="组件间交互机制"></a>组件间交互机制</h2><p>组件间交互机制有两种：restfulAPI和消息队列</p><p>restfulAPI一般是跟各个组件的api服务交互的方式</p><p>各组件之间通过rabbitmq实现进程RPC交互，相关rpc接口封装在oslo.messaging库中，实现进程间的消息交互队列。<br><img src="ccb078f3a9107360d1be1335dffe21a5b183a6d5d67a421e79a054ddfc93fbb1.png" alt="图 8">  </p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>管理用户信息，资源信息，各个类型的资源拥有单独的数据库表<br><img src="1aef5778d93e1fbdf789d29568413a49ef2adf15ee3b8b54d7d67e3c654241f2.png" alt="图 3">  </p><h3 id="镜像glance"><a href="#镜像glance" class="headerlink" title="镜像glance"></a>镜像glance</h3><p>只运行在controller节点，负责镜像管理，在创建虚机时，nava会像glance-api发送请求下载对应的镜像。</p><h3 id="keystone认证"><a href="#keystone认证" class="headerlink" title="keystone认证"></a>keystone认证</h3><p>只运行在controller节点，负责所有openstack的用户/角色/项目等管理。其他组件通过keystone的api进行用户认证。</p><h3 id="存储cinder"><a href="#存储cinder" class="headerlink" title="存储cinder"></a>存储cinder</h3><p>在控制节点上启动api和scheduler服务；计算节点上启动volume服务，通过驱动对接各种volume的操作<br><img src="2e7117c3652bbb4b4e983cefa34c99967d6e7f8121b329708eeb5e5af8ffc36b.png" alt="图 4">  </p><h3 id="网络neutron"><a href="#网络neutron" class="headerlink" title="网络neutron"></a>网络neutron</h3><p><img src="18ceec8aa5242c281fed3214ab65e36f3cec63afd3d170aee1245ec6b51fa0ae.png" alt="图 5">  </p><h3 id="nova组件"><a href="#nova组件" class="headerlink" title="nova组件"></a>nova组件</h3><p>控制节点启动api/conductor/schedule服务；计算节点启动compute服务，通过Libvirt驱动对接计算节点上的libvirt服务，负责创建虚机。<br><img src="e9ce7363f3713949e1ef6ede8f83f6e7b44e1eab6fbea574e8a7434ba083cbed.png" alt="图 6">  </p><h2 id="创建虚机的流程"><a href="#创建虚机的流程" class="headerlink" title="创建虚机的流程"></a>创建虚机的流程</h2><p><img src="62317225f89249c15baefb73a86c9198c2764fc32032893ce30f21f884bf240e.png" alt="图 7">  </p><p>1.客户端使用自己的用户名密码请求认证。<br>2.keystone通过查询在keystone的数据库user表中保存了user的相关信息，包括password加密后的hash值，并返回一个token_id（令牌），和serviceCatalog(一些服务的endpoint地址，cinder、glance-api后面下载镜像和创建块存储时会用到)。<br>3.客户端带上keystone返回的token_id和创建虚机的相关参数，Post请求nova-api创建虚拟机<br>4.nova-api接收到请求后，首先使用请求携带的token_id来访问该api，以验证请求是否有效。<br>5.keystone验证通过后返回更新后的认证信息。<br>6.nova api检查创建虚拟机参数是否有效与合法。<br>检查虚拟机name是否符合命名规范，flavor_id是否在数据库中存在，image_uuid是否是正确的uuid格式<br>检查instance、vcpu、ram的数量是否超过配额。<br>7.当且仅当所有传参都有效合法时，更新nova数据库，新建一条instance记录，vm_states设为BUILDING，task_state设为SCHEDULING.<br>8.nova api 远程调用传递请求、参数给nova scheduler，把消息“请给我创建一台虚拟机”丢到消息队列，然后定期查询虚机的状态。<br>9.nova scheduler从queue中获取到这条消息<br>10.nova scheduler访问nova 数据库，通过调度算法，过滤出一些合适的计算节点，然后进行排序。<br>11.更新虚机节点信息，返回一个最优节点id给nova scheduler。<br>12.nova scheduler选定host之后，通过rpc调用nova-compute服务，把“创建虚机请求”消息丢个mq。<br>13.nova compute收到创建虚拟机请求的消息<br>#nova-compute有个定时任务，定期从数据库中查找到运行在该节点上的所有虚拟机信息，统计得到空闲内存大小和空闲磁盘大小。然后更新数据库compute_node信息，以保证调度的准确性。<br>14.nova compute通过rpc查询nova数据库中虚机的信息例如主机模板和id<br>15.nova conductor从消息队列中拿到请求查询数据库<br>16.nova conductor查询nova数据库<br>17.数据库返回虚机信息<br>18.nova compute从消息队列中获取信息。<br>19.nova compute 请求glance 的rest api，下载所需要的镜像，一般是qcow2的。<br>20.glance api 也会去验证请求的token的有效性。<br>21.glance api 返回镜像信息给nova-compute。<br>22.同理，nova compute请求neutron api配置网络，例如获取虚机ip地址<br>23.验证token的有效性<br>24.neutron返回网络信息<br>25-27 同glance、neutron验证token返回块设备信息<br>28.据上面配置的虚拟机信息，生成xml，写入libvirt,xml文件，然后调用libvirt driver去使用libvirt.xml文件启动虚拟机。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;组件类型&quot;&gt;&lt;a href=&quot;#组件类型&quot; class=&quot;headerlink&quot; title=&quot;组件类型&quot;&gt;&lt;/a&gt;组件类型&lt;/h2&gt;&lt;p&gt;openstack部署分为控制节点和计算节点，一般有1个控制节点多个计算节点。&lt;/p&gt;</summary>
    
    
    
    <category term="openstack" scheme="https://rma-shuyu.github.io/categories/openstack/"/>
    
    
    <category term="openstack" scheme="https://rma-shuyu.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>vimrc设置</title>
    <link href="https://rma-shuyu.github.io/2022/06/06/vimrc%E8%AE%BE%E7%BD%AE/"/>
    <id>https://rma-shuyu.github.io/2022/06/06/vimrc%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-06-06T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h2><p>Vim 的全局配置一般在/etc/vim/vimrc或者/etc/vimrc，对所有用户生效。用户个人的配置在~/.vimrc。</p><span id="more"></span><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p><code>set nocompatible</code><br>不与 Vi 兼容（采用 Vim 自己的操作命令）。</p><p><code>syntax on</code><br>打开语法高亮。自动识别代码，使用多种颜色显示。</p><p><code>set showmode</code><br>在底部显示，当前处于命令模式还是插入模式。</p><p><code>set showcmd</code><br>命令模式下，在底部显示，当前键入的指令。比如，键入的指令是2y3d，那么底部就会显示2y3，当键入d的时候，操作完成，显示消失。</p><p><code>set mouse=a</code><br>支持使用鼠标。</p><p><code>set encoding=utf-8  </code><br>使用 utf-8 编码。</p><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p><code>set autoindent</code><br>按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致。</p><p><code>set tabstop=2</code><br>按下 Tab 键时，Vim 显示的空格数。</p><p><code>set shiftwidth=4</code><br>在文本上按下&gt;&gt;（增加一级缩进）、&lt;&lt;（取消一级缩进）或者==（取消全部缩进）时，每一级的字符数。</p><p><code>set expandtab</code><br>由于 Tab 键在不同的编辑器缩进不一致，该设置自动将 Tab 转为空格。</p><p><code>set softtabstop=2</code><br>Tab 转为多少个空格。</p><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p><code>set number</code><br>显示行号</p><p><code>set relativenumber</code><br>显示光标所在的当前行的行号，其他行都为相对于该行的相对行号。</p><p><code>set cursorline</code><br>光标所在的当前行高亮。</p><p><code>set textwidth=80</code><br>设置行宽，即一行显示多少个字符。</p><p><code>set wrap</code><br>自动折行，即太长的行分成几行显示。</p><p><code>set nowrap</code><br>关闭自动折行</p><p><code>set linebreak</code><br>只有遇到指定的符号（比如空格、连词号和其他标点符号），才发生折行。也就是说，不会在单词内部折行。</p><p><code>set wrapmargin=2</code><br>指定折行处与编辑窗口的右边缘之间空出的字符数。</p><p><code>set scrolloff=5</code><br>垂直滚动时，光标距离顶部/底部的位置（单位：行）。</p><p><code>set sidescrolloff=15</code><br>水平滚动时，光标距离行首或行尾的位置（单位：字符）。该配置在不折行时比较有用。</p><p><code>set laststatus=2</code><br>是否显示状态栏。0 表示不显示，1 表示只在多窗口时显示，2 表示显示。</p><p><code>set  ruler</code><br>在状态栏显示光标的当前位置（位于哪一行哪一列）。</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>set showmatch</code><br>光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号。</p><p><code>set hlsearch</code><br>搜索时，高亮显示匹配结果。</p><p><code>set incsearch</code><br>输入搜索模式时，每输入一个字符，就自动跳到第一个匹配的结果。</p><p><code>set ignorecase</code><br>搜索时忽略大小写。</p><p><code>set smartcase</code><br>如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。比如，搜索Test时，将不匹配test；搜索test时，将匹配Test。</p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p><code>set spell spelllang=en_us</code><br>打开英语单词的拼写检查。</p><p><code>set nobackup</code><br>不创建备份文件。默认情况下，文件保存时，会额外创建一个备份文件，它的文件名是在原文件名的末尾，再添加一个波浪号（〜）。</p><p><code>set noswapfile</code><br>不创建交换文件。交换文件主要用于系统崩溃时恢复文件，文件名的开头是.、结尾是.swp。</p><p><code>set undofile</code><br>保留撤销历史。</p><p>Vim 会在编辑时保存操作历史，用来供用户撤消更改。默认情况下，操作记录只在本次编辑时有效，一旦编辑结束、文件关闭，操作历史就消失了。</p><p>打开这个设置，可以在文件关闭后，操作记录保留在一个文件里面，继续存在。这意味着，重新打开一个文件，可以撤销上一次编辑时的操作。撤消文件是跟原文件保存在一起的隐藏文件，文件名以.un~开头。</p><h2 id="参考设置"><a href="#参考设置" class="headerlink" title="参考设置"></a>参考设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> ic</span><br><span class="line">syntax on</span><br><span class="line">map &lt;F12&gt; gg=G</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">paste</span></span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> has(<span class="string">&quot;autocmd&quot;</span>)</span><br><span class="line">    au BufReadPost * <span class="keyword">if</span> line(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; 1 &amp;&amp; line(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= line(<span class="string">&quot;$&quot;</span>) | exe <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java <span class="built_in">exec</span> <span class="string">&quot;:call SetTitle()&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;定义函数SetTitle，自动插入文件头</span></span><br><span class="line"><span class="string">func SetTitle()</span></span><br><span class="line"><span class="string">&quot;</span>如果文件类型为.sh文件</span><br><span class="line"><span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;sh&#x27;</span></span><br><span class="line">call setline(1,<span class="string">&quot;\#########################################################################&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\# File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+1, <span class="string">&quot;\#Created Time:&quot;</span>.strftime(<span class="string">&quot;%c&quot;</span>))</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+2, <span class="string">&quot;\#########################################################################&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+3,<span class="string">&quot;\#!/bin/bash&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+4,<span class="string">&quot;&quot;</span>)</span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;cpp&#x27;</span></span><br><span class="line">call setline(1, <span class="string">&quot;//*************************************************************************&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;#include&lt;stdio.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+1, <span class="string">&quot;#include&lt;stdlib.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+2, <span class="string">&quot;#include&lt;string.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+3, <span class="string">&quot;#include&lt;unistd.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+4, <span class="string">&quot;#include&lt;pthread.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+5, <span class="string">&quot;#include&lt;time.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+6, <span class="string">&quot;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;int main(int argc, char* argv[])&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;    return 0;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+12, <span class="string">&quot;&quot;</span>)</span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;c&#x27;</span></span><br><span class="line">call setline(1, <span class="string">&quot;//*************************************************************************&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;#include&lt;stdio.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+1, <span class="string">&quot;#include&lt;stdlib.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+2, <span class="string">&quot;#include&lt;string.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+3, <span class="string">&quot;#include&lt;unistd.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+4, <span class="string">&quot;#include&lt;pthread.h&gt;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+5, <span class="string">&quot;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+6, <span class="string">&quot;int main(int argc, char* argv[])&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;    return 0;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;&quot;</span>)</span><br><span class="line">endif</span><br><span class="line"><span class="string">&quot;新建文件后，自动定位到文件末尾</span></span><br><span class="line"><span class="string">autocmd BufNewFile * normal G</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vimrc&quot;&gt;&lt;a href=&quot;#vimrc&quot; class=&quot;headerlink&quot; title=&quot;vimrc&quot;&gt;&lt;/a&gt;vimrc&lt;/h2&gt;&lt;p&gt;Vim 的全局配置一般在/etc/vim/vimrc或者/etc/vimrc，对所有用户生效。用户个人的配置在~/.vimrc。&lt;/p&gt;</summary>
    
    
    
    <category term="VIM" scheme="https://rma-shuyu.github.io/categories/VIM/"/>
    
    
    <category term="vimrc" scheme="https://rma-shuyu.github.io/tags/vimrc/"/>
    
  </entry>
  
  <entry>
    <title>DPDK/SPDK/OVS/QEMU源码编译</title>
    <link href="https://rma-shuyu.github.io/2022/06/05/DPDK-SPDK-OVS-QEMU%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://rma-shuyu.github.io/2022/06/05/DPDK-SPDK-OVS-QEMU%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</id>
    <published>2022-06-05T12:02:04.000Z</published>
    <updated>2023-07-29T06:46:38.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DPDK"><a href="#DPDK" class="headerlink" title="DPDK"></a>DPDK</h2><p><strong>源码路径</strong><br><a href="http://fast.dpdk.org/rel/dpdk-21.11.2.tar.xz">http://fast.dpdk.org/rel/dpdk-21.11.2.tar.xz</a></p><span id="more"></span><p><strong>基础包安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install build-essential libnuma-dev python3-pyelftools</span><br><span class="line">pip3 install meson ninja pwntools -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CUR_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line">DPDK_VERSION=21.11.2</span><br><span class="line">DPDKLIB_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/dpdk_lib</span><br><span class="line">DPDKSRC_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/dpdk-stable-<span class="variable">$&#123;DPDK_VERSION&#125;</span></span><br><span class="line">DPDKBUILD_PATH=<span class="variable">$&#123;DPDKSRC_PATH&#125;</span>/build</span><br><span class="line">MESON_BUILD=<span class="string">&quot;--prefix=<span class="variable">$&#123;DPDKLIB_PATH&#125;</span>&quot;</span></span><br><span class="line">MESON_BUILD+=<span class="string">&quot; -Dbuildtype=debug&quot;</span></span><br><span class="line"><span class="comment">#MESON_BUILD+=&quot; -Dmax_numa_nodes=16&quot;</span></span><br><span class="line">MESON_BUILD+=<span class="string">&quot; -Dexamples=all&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$&#123;DPDKLIB_PATH&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$&#123;DPDKLIB_PATH&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$&#123;DPDKSRC_PATH&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    tar xvf dpdk-<span class="variable">$&#123;DPDK_VERSION&#125;</span>.tar.xz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DPDKSRC_PATH&#125;</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$&#123;DPDKBUILD_PATH&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="variable">$&#123;DPDKBUILD_PATH&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">meson <span class="variable">$&#123;MESON_BUILD&#125;</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">ninja</span><br><span class="line">ninja install</span><br><span class="line">sudo ldconfig</span><br><span class="line"><span class="built_in">cp</span> -f <span class="variable">$&#123;DPDKBUILD_PATH&#125;</span>/examples/dpdk-vdpa <span class="variable">$&#123;DPDKLIB_PATH&#125;</span>/bin/dpdk-vdpa</span><br></pre></td></tr></table></figure><h2 id="SPDK"><a href="#SPDK" class="headerlink" title="SPDK"></a>SPDK</h2><p>下载SPDK版本V20.10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b V20.10 https:/http://github.com/spdk/spdk</span><br></pre></td></tr></table></figure><p>更新SPDK依赖模块 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><p>进入子目录scripts执行脚本，该脚本会检测环境是否满足编译SDPK </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh pkgdep.sh</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"><span class="comment"># File Name: build.sh</span></span><br><span class="line"><span class="comment">#Created Time:Fri Jun  9 17:58:28 2023</span></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">CUR_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line">INSTALL_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/spdk_install_dir</span><br><span class="line">SPDK_VERSION=20.10</span><br><span class="line">SPDKSRC_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/spdk-<span class="variable">$&#123;SPDK_VERSION&#125;</span></span><br><span class="line">DPDK_LIB=<span class="variable">$&#123;CUR_PATH&#125;</span>/dpdk_lib/lib/x86_64-linux-gnu</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;INSTALL_PATH&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;SPDKSRC_PATH&#125;</span></span><br><span class="line"></span><br><span class="line">./configure --prefix=<span class="variable">$&#123;INSTALL_PATH&#125;</span> --enable-debug --without-rbd --with-dpdk=<span class="variable">$&#123;DPDK_LIB&#125;</span> --with-virtio</span><br><span class="line"></span><br><span class="line">make -j`grep -c ^processor /proc/cpuinfo` </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="OVS"><a href="#OVS" class="headerlink" title="OVS"></a>OVS</h2><p><strong>源码路径</strong><br><a href="https://www.openvswitch.org/releases/openvswitch-2.17.6.tar.gz">https://www.openvswitch.org/releases/openvswitch-2.17.6.tar.gz</a></p><p><strong>基础包安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install build-essential fakeroot dh-make devscripts linux-headers-generic python3-distutils-extra dh-python pkg-config</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CUR_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line">INSTALL_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/install_dir</span><br><span class="line">OVS_VERSION=2.17.6</span><br><span class="line">OVSSRC_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/openvswitch-<span class="variable">$&#123;OVS_VERSION&#125;</span></span><br><span class="line">DPDK_PKG=<span class="variable">$&#123;CUR_PATH&#125;</span>/dpdk_lib/lib/x86_64-linux-gnu/pkgconfig</span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="variable">$&#123;DPDK_PKG&#125;</span>:<span class="variable">$PKG_CONFIG_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;INSTALL_PATH&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;OVSSRC_PATH&#125;</span></span><br><span class="line"></span><br><span class="line">./configure --disable-ssl --disable-libcapng CFLAGS=<span class="string">&quot;-g&quot;</span> --with-dpdk=<span class="built_in">yes</span>  \</span><br><span class="line">   --prefix=<span class="variable">$&#123;INSTALL_PATH&#125;</span>/usr --localstatedir=<span class="variable">$&#123;INSTALL_PATH&#125;</span>/var --sysconfdir=<span class="variable">$&#123;INSTALL_PATH&#125;</span>/etc</span><br><span class="line">make -j`grep -c ^processor /proc/cpuinfo` </span><br><span class="line">make install</span><br><span class="line">make modules_install</span><br></pre></td></tr></table></figure><h2 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h2><p><strong>源码路径</strong><br><a href="https://download.qemu.org/qemu-6.2.0.tar.xz">https://download.qemu.org/qemu-6.2.0.tar.xz</a></p><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CUR_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line">INSTALL_PATH=<span class="variable">$&#123;CUR_PATH&#125;</span>/install_dir</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;CUR_PATH&#125;</span>/install_dir</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> qemu-6.2.0</span><br><span class="line"><span class="built_in">rm</span> -rf build</span><br><span class="line"><span class="built_in">mkdir</span> -p build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">../configure --prefix=<span class="variable">$&#123;INSTALL_PATH&#125;</span> --enable-trace-backends=<span class="built_in">log</span> --enable-kvm --enable-debug \</span><br><span class="line">--enable-debug-info --enable-vnc --target-list=x86_64-softmmu</span><br><span class="line"><span class="comment">#编译arm版本 --target-list=aarch64-softmmu</span></span><br><span class="line"></span><br><span class="line">make -j`grep -c ^processor /proc/cpuinfo` </span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;DPDK&quot;&gt;&lt;a href=&quot;#DPDK&quot; class=&quot;headerlink&quot; title=&quot;DPDK&quot;&gt;&lt;/a&gt;DPDK&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;源码路径&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://fast.dpdk.org/rel/dpdk-21.11.2.tar.xz&quot;&gt;http://fast.dpdk.org/rel/dpdk-21.11.2.tar.xz&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="qemu" scheme="https://rma-shuyu.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>virtqueue与spdq rings</title>
    <link href="https://rma-shuyu.github.io/2022/06/05/virtqueue/"/>
    <id>https://rma-shuyu.github.io/2022/06/05/virtqueue/</id>
    <published>2022-06-05T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="virtqueue设置原则"><a href="#virtqueue设置原则" class="headerlink" title="virtqueue设置原则"></a>virtqueue设置原则</h2><p>根据数据驱动的方向设置virtqueue数量，不同的数据驱动方向需要单独的virtqueue。比如：</p><span id="more"></span><p>vnet设备的rx方向，由后端设备收包驱动数据流向，数据由<strong>后端触发</strong>，发往前端（需要前端预先准备好空闲buffers提供给后端），需要独立的virtqueue；</p><p>vnet设备的tx方向，由前端发包请求驱动数据流向，数据由<strong>前端触发</strong>，发往后端（后端处理完后把空闲buffers还给前端），需要独立的virtqueue，不能和rx方向复用（否则如果和rx方向复用的话，available ring中会装满rx需要使用的host侧空闲buffers，待发送数据buffers就无法有效传递到设备侧）；</p><p>vblk设备的in和out操作，都是由前端发起请求驱动数据流向，数据由<strong>前端触发</strong>，发往后端（请求headers，和in请求的空闲buffers，以及out请求的待发送数据buffers），后端处理完之后还给前端（响应headers，和in请求的已读取数据buffers，以及out请求的空闲buffers），完成一个数据循环，所以只需要一个virtqueue，in和out可以复用。</p><h2 id="virtqueue概念"><a href="#virtqueue概念" class="headerlink" title="virtqueue概念"></a>virtqueue概念</h2><p>virtqueue是数据流向&amp;流程的逻辑抽象，主要包括数据传递的发起方向、空闲host buffers的分配或回收、数据host buffers的传递、任务通知等方面。</p><p>virtqueue的概念经过抽象，主要包含如下几个方面：</p><p>host buffers的传递通道（available ring &amp; used ring）</p><p><code>available ring</code>：net rx场景，host用来向设备发放空闲host buffers，<strong>必须提前发放</strong>，设备按需去取；net tx场景，host用来向设备发放数据host buffers，设备应该立刻取走发送。</p><p><code>used ring</code>：net rx场景，设备用来向host发送数据host buffers，即收到的数据包；net tx场景，设备用来向host归还空闲host buffers。</p><p>通知机制（kick &amp; irq）</p><p><code>kick</code>：net rx场景，host用来通知设备准备好了空闲buffers；net tx场景，host用来通知设备有待发送数据包。</p><p><code>irq</code>：net rx场景，设备用来通知host有新收到的数据包；net tx场景，设备用来通知host发送任务完成，归还空闲host buffers。</p><p>数据传递的发起方向（host发起 or device发起），用来决定需不需要设置单独的virtqueue</p><p>virtqueue不关心host buffers传递到设备后，设备具体如何处理。不同的设备拿到host buffers之后，有自己私有的实现方式。</p><h2 id="spd-rings概念"><a href="#spd-rings概念" class="headerlink" title="spd rings概念"></a>spd rings概念</h2><p>spd rings是fpga实现具体IO任务的方式。host通过virtqueue把空闲和数据buffers传递到fpga，但真正的数据接收或发送任务是在soc完成，涉及host buffers和soc buffers之间的数据传递及通知，fpga使用spd rings实现这些具体功能。</p><h3 id="对应关系"><a href="#对应关系" class="headerlink" title="对应关系"></a>对应关系</h3><p>每条virtqueue（包含available ring &amp; used ring）对应一套spd rings（包含rx ring、tx ring和free ring），对应关系如下图所示：<br><img src="98fa220eb878bf19efad8628b63c1ec125daddb56b2b19d3daf94cdbeff291da.png" alt="图 1">  </p><p>下面按具体场景分析virtqueue和spd rings如何配合工作</p><h3 id="net-rx"><a href="#net-rx" class="headerlink" title="net rx"></a>net rx</h3><p><img src="57c05468b7ebd2a827e448136ef1ec7153a45b8a99d67c96e63235bf14a23024.png" alt="图 2">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">virtio_dev &gt;&gt; show queue info 577 0     </span><br><span class="line">Register Configuration:</span><br><span class="line">    hw_qid:517, q_type:net-rx, vre_active:enabled</span><br><span class="line">    msix:enabled, base_addr:0xfee00638, data:0x00000000</span><br><span class="line">    hash_node_fpga_qid:0, qid:0, sfi:577</span><br><span class="line">    qid2bdf:0xcc01, host_tx_queue_en:enabled</span><br><span class="line"></span><br><span class="line">Host Side VQ Info:</span><br><span class="line">    desc_base :0x36050000, indir_flag:1, size:512, <span class="built_in">type</span>:net-rx, default enabled</span><br><span class="line">    avail_base:0x36052000, indir_flag:1, size:512, <span class="built_in">type</span>:net-rx, default enabled</span><br><span class="line">    used_base :0x36053000, indir_flag:1, size:512, <span class="built_in">type</span>:net-rx, default enabled</span><br><span class="line">    avail_ring_tail:512, avail_ring_head:512</span><br><span class="line">    used_ring_tail:14, used_ring_idx_tail:14</span><br><span class="line"></span><br><span class="line">SoC Side Ring Info:</span><br><span class="line">    rx ring base:0x487b42000, size:16384, <span class="built_in">type</span>:net, enabled</span><br><span class="line">    rx ring_head:14, <span class="built_in">tail</span>:14, inflight_tail:0</span><br><span class="line"></span><br><span class="line">    tx ring base:0x487b02000, size:16384, <span class="built_in">type</span>:net-rx, default enabled</span><br><span class="line">    tx ring <span class="built_in">tail</span> (PA):0x487b82000, <span class="built_in">tail</span>:512, inflight_tail:512,eop_cnt:512</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要点说明：</p><p>net rx场景，spd rings中的free ring不会使用，只用到tx ring和rx ring</p><p>host提前把host free buffers的idxes放入virtqueue的available ring，发送给fpga，供收到数据包时使用</p><p>fpga取出，获取每个host free buffers的paddr，构造tx messages（同时会记录idxes），放入tx ring发送给soc，供soc收到数据包时使用</p><p>soc的dpdk app从外部网络端口收到数据包后，从tx ring获取host free buffers，结合soc收包mbufs的paddr构造rx messages，放入rx ring</p><p>fpga从rx ring获取rx messages，执行数据搬移任务，将数据包从soc mbufs搬移到host free buffers，将当前数据包的host buffers的idxes（一直记录在spd ring tx&amp;rx messages中传递）放入virtqueue的used ring，通知host取包</p><p>数据搬移完成后，soc可以从rx ring的tail指针变化感知，此时可以释放soc的mbufs</p><p>host择机再次把host free buffers的idxes放入virtqueue的available ring，发送给fpga，供下次收到数据包时使用</p><h3 id="net-tx"><a href="#net-tx" class="headerlink" title="net tx"></a>net tx</h3><p><img src="92e687118d6ae932e0850f4abe8f19c73d6b79d2d2eab98abb4a28ddb97b56e9.png" alt="图 3">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">virtio_dev &gt;&gt; show queue info 577 1     </span><br><span class="line">Register Configuration:</span><br><span class="line">    hw_qid:5, q_type:net-tx, vre_active:enabled</span><br><span class="line">    msix:enabled, base_addr:0xfee00658, data:0x00000000</span><br><span class="line">    hash_node_fpga_qid:0, qid:1, sfi:577</span><br><span class="line">    qid2bdf:0xcc01, host_tx_queue_en:enabled</span><br><span class="line"></span><br><span class="line">Host Side VQ Info:</span><br><span class="line">    desc_base :0x36098000, indir_flag:1, size:512, <span class="built_in">type</span>:net-tx, default enabled</span><br><span class="line">    avail_base:0x3609a000, indir_flag:1, size:512, <span class="built_in">type</span>:net-tx, default enabled</span><br><span class="line">    used_base :0x3609b000, indir_flag:1, size:512, <span class="built_in">type</span>:net-tx, default enabled</span><br><span class="line">    avail_ring_tail:0, avail_ring_head:0</span><br><span class="line">    used_ring_tail:0, used_ring_idx_tail:0</span><br><span class="line"></span><br><span class="line">SoC Side Ring Info:</span><br><span class="line">    free ring base:0x47a800000, size:16384, <span class="built_in">type</span>:net, enabled</span><br><span class="line">    free ring <span class="built_in">head</span>:0, <span class="built_in">tail</span>:256, inflight_head:0</span><br><span class="line"></span><br><span class="line">    tx ring base:0x47a820000, size:16384, <span class="built_in">type</span>:net-tx, default enabled</span><br><span class="line">    tx ring <span class="built_in">tail</span> (PA):0x47a860000, <span class="built_in">tail</span>:0, inflight_tail:0,eop_cnt:0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要点说明：</p><p>net tx场景，spd rings中的rx ring不会使用，只用到tx ring和free ring</p><p>soc提前将空闲的soc mbufs放入free ring，供fpga收到发包任务时使用</p><p>host发起发包任务，填写待发送数据包的buffers，并把这些buffers的idxes放入virtqueue的available ring，发往fpga</p><p>fpga取出，并获取这些待发送数据包host buffers的paddr，再从free ring中取出soc free mbufs，直接执行数据搬移操作，将数据从host buffers搬移到soc mbufs中，搬移完成后将soc mbufs放入tx ring发往soc，并将host buffers的idxes放入virtqueue的uesd ring归还给host</p><p>soc从tx ring获取到待发送数据包的soc mbufs，执行发包操作，发送完成后将soc mbufs释放</p><p>soc择机将空闲的soc mbufs再次注入free ring，供fpga下次收到发包任务时继续使用</p><h3 id="blk-in-amp-out"><a href="#blk-in-amp-out" class="headerlink" title="blk in&amp;out"></a>blk in&amp;out</h3><p><img src="54fb5a0c9073a46445ce2b030f23555ef1b203fc3d02a007875f2f0cd63242c5.png" alt="图 4">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">virtio_dev &gt;&gt; show queue info 66 0     </span><br><span class="line">Register Configuration:</span><br><span class="line">    hw_qid:1028, q_type:blk, vre_active:enabled</span><br><span class="line">    msix:enabled, base_addr:0xfee006b8, data:0x00000000</span><br><span class="line">    hash_node_fpga_qid:0, qid:0, sfi:66</span><br><span class="line">    qid2bdf:0xb302, host_tx_queue_en:enabled</span><br><span class="line"></span><br><span class="line">Host Side VQ Info:</span><br><span class="line">    desc_base :0x320f6000, indir_flag:1, size:128, <span class="built_in">type</span>:blk, default enabled</span><br><span class="line">    avail_base:0x320f6800, indir_flag:1, size:128, <span class="built_in">type</span>:blk, default enabled</span><br><span class="line">    used_base :0x320f7000, indir_flag:1, size:128, <span class="built_in">type</span>:blk, default enabled</span><br><span class="line">    avail_ring_tail:6, avail_ring_head:6</span><br><span class="line">    used_ring_tail:6, used_ring_idx_tail:6</span><br><span class="line"></span><br><span class="line">SoC Side Ring Info:</span><br><span class="line">    free ring base:0x49cca1000, size:16384, <span class="built_in">type</span>:blk, enabled</span><br><span class="line">    free ring <span class="built_in">head</span>:6, <span class="built_in">tail</span>:261, inflight_head:6</span><br><span class="line"></span><br><span class="line">    rx ring base:0x49cd01000, size:16384, <span class="built_in">type</span>:blk, enabled</span><br><span class="line">    rx ring_head:40, <span class="built_in">tail</span>:40, inflight_tail:0</span><br><span class="line"></span><br><span class="line">    tx ring base:0x49ccc1000, size:16384, <span class="built_in">type</span>:blk, default enabled</span><br><span class="line">    tx ring <span class="built_in">tail</span> (PA):0x49cd41000, <span class="built_in">tail</span>:42, inflight_tail:42,eop_cnt:6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要点说明：</p><p>blk in&amp;out场景，所有spd rings都会被用到（blk只给出数据的流向示意，不涉及soc vblk具体处理）</p><p>blk in&amp;out操作均有host发起，in请求将请求headers和空闲buffers发往设备，接收响应headers和数据buffers；out请求将请求headers和数据buffers发往设备，接收响应headers和空闲buffers；in&amp;out请求可以同时在同一个virtqueue发送</p><p>in操作（图中绿色箭头路线），参考net rx流程，主要差别是增加了对request headers和response headers的处理（未画出），tx ring复用了tx soc data buffers和rx host free buffers的发送，以及数据流向由host驱动</p><p>out操作（图中蓝色箭头路线），参考net tx流程，主要差别是增加了对request headers和response headers的处理（未画出），以及tx ring复用了tx soc data buffers和rx host free buffers的发送</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;virtqueue设置原则&quot;&gt;&lt;a href=&quot;#virtqueue设置原则&quot; class=&quot;headerlink&quot; title=&quot;virtqueue设置原则&quot;&gt;&lt;/a&gt;virtqueue设置原则&lt;/h2&gt;&lt;p&gt;根据数据驱动的方向设置virtqueue数量，不同的数据驱动方向需要单独的virtqueue。比如：&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="virtio" scheme="https://rma-shuyu.github.io/tags/virtio/"/>
    
  </entry>
  
  <entry>
    <title>qemu中的协程</title>
    <link href="https://rma-shuyu.github.io/2022/06/04/qemu%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
    <id>https://rma-shuyu.github.io/2022/06/04/qemu%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/</id>
    <published>2022-06-04T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程是一种用户态的轻量级线程，相对于系统独立，有自己的上下文，协程的切换也由自己控制，所以相对于进程和线程来说其运行的开销要小得多。</p><span id="more"></span><h2 id="qemu-coroutine-API"><a href="#qemu-coroutine-API" class="headerlink" title="qemu-coroutine API"></a>qemu-coroutine API</h2><p>源码：<br>qemu-coroutine.c<br>coroutine-ucontext.c<br>coroutine-ucontext.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建新的协程</span></span><br><span class="line"><span class="comment"> * 使用qemu_coroutine_enter() 进入协程执行环境.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Coroutine *<span class="title function_">qemu_coroutine_create</span><span class="params">(CoroutineEntry *entry)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进入协程执行环境</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * opaque为传递给协程执行入口参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">qemu_coroutine_enter</span><span class="params">(Coroutine *coroutine, <span class="type">void</span> *opaque)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转移执行控制权到协程的调用者处</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个函数不会返回除非使用qemu_coroutine_enter()重新进入协程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> coroutine_fn <span class="title function_">qemu_coroutine_yield</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><p>qemu协程使用非常简单，创建并启动协程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coroutine *co = qemu_coroutine_create(process_incoming_migration_co, <span class="literal">NULL</span>);</span><br><span class="line">qemu_coroutine_enter(co);</span><br></pre></td></tr></table></figure><p>coroutine协程则会执行直到退出或者yields</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">process_incoming_migration_co</span><span class="params">(<span class="type">void</span> *opaque)</span> &#123; </span><br><span class="line">      MyData *my_data = opaque; </span><br><span class="line"></span><br><span class="line">      <span class="comment">/* do some work */</span> </span><br><span class="line"></span><br><span class="line">      qemu_coroutine_yield(); </span><br><span class="line"></span><br><span class="line">      <span class="comment">/* do some more work */</span> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>yielding 会切换回qemu_coroutine_enter的调用者，qemu中则在发起一个异步的I/O请求后切回主线程的event loop。</p><h2 id="qemu协程基础"><a href="#qemu协程基础" class="headerlink" title="qemu协程基础"></a>qemu协程基础</h2><p>qemu-coroutine的实现有gthread,ucontext,sigalstack等几种模式，这里主要看ucontext模式,而coroutine的基础是sigsetjmp/siglongjmp.</p><h3 id="sigsetjmp-siglongjmp"><a href="#sigsetjmp-siglongjmp" class="headerlink" title="sigsetjmp/siglongjmp"></a>sigsetjmp/siglongjmp</h3><p>sigsetjmp/siglongjmp是C语言的一组库函数，主要作用是“非本地跳转”，区别于goto，它们能够完成函数外部的跳转。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigsetjmp</span><span class="params">( jmp_buf env )</span>;   <span class="comment">//用于保存程序的运行时的堆栈环境</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">siglongjmp</span><span class="params">( jmp_buf env, <span class="type">int</span> value )</span>; <span class="comment">//用于恢复先前程序中调用的setjmp函数时所保存的堆栈环境,参数value为setjmp返回值</span></span><br></pre></td></tr></table></figure><p>其主要作用就是save、restore当前程序的运行上下文，包括寄存器、堆栈信息等到jmp_buf中。</p><h3 id="ucontext"><a href="#ucontext" class="headerlink" title="ucontext"></a>ucontext</h3><p>ucontext函数组为sigsetjmp/siglongjmp的升级版：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>  <span class="title function_">getcontext</span><span class="params">(<span class="type">ucontext_t</span> *)</span>; <span class="comment">//初始化ucontext_t结构体，将当前的上下文保存到ucontext_t中</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">setcontext</span><span class="params">(<span class="type">const</span> <span class="type">ucontext_t</span> *)</span>;  <span class="comment">//设置当前的上下文为ucontext_t,并跳转至其中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">makecontext</span><span class="params">(<span class="type">ucontext_t</span> *, (<span class="type">void</span> *)(), <span class="type">int</span>, ...)</span>; <span class="comment">//制造一个上下文，并设置入口函数</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">swapcontext</span><span class="params">(<span class="type">ucontext_t</span> *, <span class="type">const</span> <span class="type">ucontext_t</span> *)</span>; <span class="comment">//保存当前上下文到第一个参数中，然后切换到第二个参数代表的上下文。</span></span><br></pre></td></tr></table></figure><h2 id="qemu-coroutine的实现"><a href="#qemu-coroutine的实现" class="headerlink" title="qemu-coroutine的实现"></a>qemu-coroutine的实现</h2><p>qemu-coroutine主要基于sigsetjmp/siglongjmp实现，更为轻量级。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">Coroutine *<span class="title function_">qemu_coroutine_create</span><span class="params">(CoroutineEntry *entry)</span></span><br><span class="line">&#123;</span><br><span class="line">    Coroutine *co = qemu_coroutine_new();  <span class="comment">// 创建一个新的coroutine</span></span><br><span class="line">    co-&gt;entry = entry;   <span class="comment">//设置coroutine的入口函数为entry</span></span><br><span class="line">    <span class="keyword">return</span> co;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Coroutine *<span class="title function_">qemu_coroutine_new</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    CoroutineUContext *co;</span><br><span class="line">    <span class="type">ucontext_t</span> old_uc, uc;</span><br><span class="line">    sigjmp_buf old_env;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">cc_arg</span> <span class="title">arg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">void</span> *fake_stack_save = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得当前上下文</span></span><br><span class="line">    <span class="keyword">if</span> (getcontext(&amp;uc) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    co = g_malloc0(<span class="keyword">sizeof</span>(*co));</span><br><span class="line">    co-&gt;stack_size = COROUTINE_STACK_SIZE;</span><br><span class="line">    co-&gt;<span class="built_in">stack</span> = qemu_alloc_stack(&amp;co-&gt;stack_size);</span><br><span class="line"></span><br><span class="line">    co-&gt;base.entry_arg = &amp;old_env; <span class="comment">/* stash away our jmp_buf */</span></span><br><span class="line"></span><br><span class="line">    uc.uc_link = &amp;old_uc;</span><br><span class="line">    uc.uc_stack.ss_sp = co-&gt;<span class="built_in">stack</span>;</span><br><span class="line">    uc.uc_stack.ss_size = co-&gt;stack_size;</span><br><span class="line">    uc.uc_stack.ss_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    arg.p = co;</span><br><span class="line"></span><br><span class="line">    on_new_fiber(co);</span><br><span class="line">    <span class="comment">//制造一个上下文，设置该上下文的栈空间及相关信息</span></span><br><span class="line">    makecontext(&amp;uc, (<span class="type">void</span> (*)(<span class="type">void</span>))coroutine_trampoline,</span><br><span class="line">                <span class="number">2</span>, arg.i[<span class="number">0</span>], arg.i[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* swapcontext() in, siglongjmp() back out */</span></span><br><span class="line">     <span class="comment">//保存当前上下文到old_env中，此时old_env的地址作为co-&gt;base.entry_arg</span></span><br><span class="line">    <span class="keyword">if</span> (!sigsetjmp(old_env, <span class="number">0</span>)) &#123;</span><br><span class="line">        start_switch_fiber_asan(COROUTINE_YIELD, &amp;fake_stack_save, co-&gt;<span class="built_in">stack</span>,</span><br><span class="line">                                co-&gt;stack_size);</span><br><span class="line">        start_switch_fiber_tsan(&amp;fake_stack_save,</span><br><span class="line">                                co, <span class="literal">false</span>); <span class="comment">/* false=not caller */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//切换至uc代表的上下文中，入口函数为coroutine_trampoline，返回点为old_uc中</span></span><br><span class="line">        swapcontext(&amp;old_uc, &amp;uc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finish_switch_fiber(fake_stack_save);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;co-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">coroutine_trampoline</span><span class="params">(<span class="type">int</span> i0, <span class="type">int</span> i1)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">cc_arg</span> <span class="title">arg</span>;</span></span><br><span class="line">    CoroutineUContext *self;</span><br><span class="line">    Coroutine *co;</span><br><span class="line">    <span class="type">void</span> *fake_stack_save = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    finish_switch_fiber(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    arg.i[<span class="number">0</span>] = i0;</span><br><span class="line">    arg.i[<span class="number">1</span>] = i1;</span><br><span class="line">    self = arg.p;</span><br><span class="line">    <span class="comment">//获取了通过coroutine_new创建的coroutine结构</span></span><br><span class="line">    co = &amp;self-&gt;base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize longjmp environment and switch back the caller */</span></span><br><span class="line">    <span class="comment">//保存当前上下文到co（新协程）的env buffer中，由于第一次setjmp返回的是0，则调用下面的longjmp</span></span><br><span class="line">    <span class="keyword">if</span> (!sigsetjmp(self-&gt;env, <span class="number">0</span>)) &#123;</span><br><span class="line">        start_switch_fiber_asan(COROUTINE_YIELD, &amp;fake_stack_save, leader.<span class="built_in">stack</span>,</span><br><span class="line">                                leader.stack_size);</span><br><span class="line">        start_switch_fiber_tsan(&amp;fake_stack_save, self, <span class="literal">true</span>); <span class="comment">/* true=caller */</span></span><br><span class="line">         <span class="comment">//此时co-&gt;entry_arg为coroutine_new中的old_env保存点，而value给的是1，则swapcontext不会执行，直接return，qemu_coroutine_create就直接返回了</span></span><br><span class="line">        siglongjmp(*(sigjmp_buf *)co-&gt;entry_arg, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finish_switch_fiber(fake_stack_save);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        co-&gt;entry(co-&gt;entry_arg);</span><br><span class="line">        qemu_coroutine_switch(co, co-&gt;caller, COROUTINE_TERMINATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过create的过程，新创建的co的env保存了coroutine_trampoline中setjmp(self-&gt;env)的上下文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qemu_coroutine_enter</span><span class="params">(Coroutine *co, <span class="type">void</span> *opaque)</span></span><br><span class="line">&#123;</span><br><span class="line">    Coroutine *from = qemu_coroutine_self();   <span class="comment">//获取当前协程的co结构，第一次可认为是主协程的控制信息</span></span><br><span class="line"></span><br><span class="line">    to-&gt;caller = from;   <span class="comment">//新协程的caller为主线程co</span></span><br><span class="line">    to-&gt;ctx = ctx;</span><br><span class="line">    qemu_coroutine_switch(from, to, COROUTINE_ENTER);   <span class="comment">//通过swap操作从主协程切换至新创建的co</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//qemu_coroutine_switch 为协程切换的关键函数</span></span><br><span class="line">CoroutineAction __attribute__((noinline))</span><br><span class="line">qemu_coroutine_switch(Coroutine *from_, Coroutine *to_,</span><br><span class="line">                      CoroutineAction action)</span><br><span class="line">&#123;</span><br><span class="line">    CoroutineUContext *from = DO_UPCAST(CoroutineUContext, base, from_);</span><br><span class="line">    CoroutineUContext *to = DO_UPCAST(CoroutineUContext, base, to_);</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">void</span> *fake_stack_save = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    current = to_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存当前的上下文到主协程的env中，相当于主协程的上下文在qemu_coroutine_enter中</span></span><br><span class="line">    ret = sigsetjmp(from-&gt;env, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        start_switch_fiber_asan(action, &amp;fake_stack_save, to-&gt;<span class="built_in">stack</span>,</span><br><span class="line">                                to-&gt;stack_size);</span><br><span class="line">        start_switch_fiber_tsan(&amp;fake_stack_save,</span><br><span class="line">                                to, <span class="literal">false</span>); <span class="comment">/* false=not caller */</span></span><br><span class="line"><span class="comment">//跳转至新协程的上下文，新协程的上下文保存点为coroutine_trampoline中的setjmp处，此处action给的是非0，则直接进入co-&gt;entry(co-&gt;entry_arg);执行create时给的entry.</span></span><br><span class="line">        siglongjmp(to-&gt;env, action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finish_switch_fiber(fake_stack_save);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若co-&gt;entry(co-&gt;entry_arg)中使用<code>qemu_coroutine_yield</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> coroutine_fn <span class="title function_">qemu_coroutine_yield</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Coroutine *self = qemu_coroutine_self();</span><br><span class="line">    Coroutine *to = self-&gt;caller;</span><br><span class="line"></span><br><span class="line">    trace_qemu_coroutine_yield(self, to);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!to) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Co-routine is yielding to no one\n&quot;</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self-&gt;caller = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//此处self为新协程，to为主协程</span></span><br><span class="line">    qemu_coroutine_switch(self, to, COROUTINE_YIELD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次通过coroutine_swap操作来进行切换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">CoroutineAction <span class="title function_">qemu_coroutine_switch</span><span class="params">(Coroutine *from_, Coroutine *to_,</span></span><br><span class="line"><span class="params">                                      CoroutineAction action)</span></span><br><span class="line">&#123;</span><br><span class="line">    CoroutineUContext *from = DO_UPCAST(CoroutineUContext, base, from_);</span><br><span class="line">    CoroutineUContext *to = DO_UPCAST(CoroutineUContext, base, to_);</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">void</span> *fake_stack_save = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    current = to_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存当前上下文到from的env即新协程的env，此处的调用栈为qemu_coroutine_yield的内部</span></span><br><span class="line">    ret = sigsetjmp(from-&gt;env, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        start_switch_fiber_asan(action, &amp;fake_stack_save, to-&gt;<span class="built_in">stack</span>,</span><br><span class="line">                                to-&gt;stack_size);</span><br><span class="line">        start_switch_fiber_tsan(&amp;fake_stack_save,</span><br><span class="line">                                to, <span class="literal">false</span>); <span class="comment">/* false=not caller */</span></span><br><span class="line">        <span class="comment">//切换至主协程的上下文，在上面enter的分析中可以得到，此时主协程的上下文在qemu_coroutine_enter中。</span></span><br><span class="line">        siglongjmp(to-&gt;env, action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finish_switch_fiber(fake_stack_save);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样yield处的上下文被保存在新协程的env中，而程序逻辑调回了qemu_coroutine_enter中继续执行，即从qemu_coroutine_enter退出。</p><p>在适当的时机，再次调用qemu_coroutine_enter则会恢复yield处的上下文继续执行。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h2&gt;&lt;p&gt;协程是一种用户态的轻量级线程，相对于系统独立，有自己的上下文，协程的切换也由自己控制，所以相对于进程和线程来说其运行的开销要小得多。&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://rma-shuyu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="qemu" scheme="https://rma-shuyu.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>msg_control</title>
    <link href="https://rma-shuyu.github.io/2022/06/03/msg-control/"/>
    <id>https://rma-shuyu.github.io/2022/06/03/msg-control/</id>
    <published>2022-06-03T12:02:04.000Z</published>
    <updated>2023-07-01T09:37:27.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="msghdr结构"><a href="#msghdr结构" class="headerlink" title="msghdr结构"></a>msghdr结构</h2><p>msghdr结构一般会用于如下两个函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendmsg</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> msghdr *msg, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvmsg</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> msghdr *msg, <span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><p>它主要用于向一个socket发送消息，或从一个socket中接收消息。此处很重要的一个作用就是用在unix域中传递一个文件描述符。struct msghdr结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> &#123;</span>                    <span class="comment">/* Scatter/gather array items */</span></span><br><span class="line">   <span class="type">void</span>  *iov_base;              <span class="comment">/* Starting address */</span></span><br><span class="line">   <span class="type">size_t</span> iov_len;               <span class="comment">/* Number of bytes to transfer */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> &#123;</span></span><br><span class="line">   <span class="type">void</span>         *msg_name;       <span class="comment">/* optional address */</span></span><br><span class="line">   <span class="type">socklen_t</span>     msg_namelen;    <span class="comment">/* size of address */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">msg_iov</span>;</span>        <span class="comment">/* scatter/gather array */</span></span><br><span class="line">   <span class="type">size_t</span>        msg_iovlen;     <span class="comment">/* # elements in msg_iov */</span></span><br><span class="line">   <span class="type">void</span>         *msg_control;    <span class="comment">/* ancillary data, see below */</span></span><br><span class="line">   <span class="type">size_t</span>        msg_controllen; <span class="comment">/* ancillary data buffer len */</span></span><br><span class="line">   <span class="type">int</span>           msg_flags;      <span class="comment">/* flags on received message */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>msg_control</code>指针: 指向与协议控制相关的消息或者辅助数据.<br><code>msg_controllen</code>: msg_control所指向的这块缓冲的长度。</p><p><code>msg_control</code>是一个<code>struct cmsghdr</code>结构，下面我们会介绍。</p><h2 id="cmsghdr结构"><a href="#cmsghdr结构" class="headerlink" title="cmsghdr结构"></a>cmsghdr结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmsghdr</span> &#123;</span></span><br><span class="line">   <span class="type">size_t</span> cmsg_len;    <span class="comment">/* Data byte count, including header</span></span><br><span class="line"><span class="comment">                          (type is socklen_t in POSIX) */</span></span><br><span class="line">   <span class="type">int</span>    cmsg_level;  <span class="comment">/* Originating protocol */</span></span><br><span class="line">   <span class="type">int</span>    cmsg_type;   <span class="comment">/* Protocol-specific type */</span></span><br><span class="line"><span class="comment">/* followed by</span></span><br><span class="line"><span class="comment">   unsigned char cmsg_data[]; */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>cmsg_level</code>一般为原始的协议级别，<code>cmsg_type</code>为前面原始协议下的某一个子类型。<br>要访问此辅助数据结构，一般会用到如下几个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> cmsghdr *<span class="title function_">CMSG_FIRSTHDR</span><span class="params">(<span class="keyword">struct</span> msghdr *msgh)</span>;</span><br><span class="line"><span class="keyword">struct</span> cmsghdr *<span class="title function_">CMSG_NXTHDR</span><span class="params">(<span class="keyword">struct</span> msghdr *msgh, <span class="keyword">struct</span> cmsghdr</span></span><br><span class="line"><span class="params">*cmsg)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">CMSG_ALIGN</span><span class="params">(<span class="type">size_t</span> length)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">CMSG_SPACE</span><span class="params">(<span class="type">size_t</span> length)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">CMSG_LEN</span><span class="params">(<span class="type">size_t</span> length)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *<span class="title function_">CMSG_DATA</span><span class="params">(<span class="keyword">struct</span> cmsghdr *cmsg)</span>;</span><br></pre></td></tr></table></figure><p>这些宏用于创建和访问控制消息(msg_control)，也称为辅助数据，其并不作为socket净荷数据的一部分，净荷数据保存在<code>msg_iov</code>中（参见上述struct msghdr)。 这些辅助数据可能包括：</p><ul><li><p>所收到的packet的网卡接口</p></li><li><p>一些不太常用的头部字段</p></li><li><p>一个扩展的错误描述</p></li><li><p>一个文件描述符集合</p></li><li><p>UNIX credentials</p></li></ul><p>例如用辅助数据可以发送一些额外的头部字段(eg. IP options)。</p><p>要访问一系列的cmsghdr结构，我们必须使用如下这些宏，而不要直接访问：</p><p><code>CMSG_FIRSTHDR()</code>: 返回msghdr辅助数据部分指向第一个cmsghdr的指针</p><p><code>CMSG_NXTHDR()</code>: 返回参数中cmsghdr的下一个有效cmsghdr。当msg_control buffer中没有足够剩余的空间的时候，返回NULL</p><p><code>CMSG_ALIGN()</code>: 给定一个长度，其会返回对齐后相应的长度。它是一个常量表达式，其一般实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CMSG_ALIGN(len)  ( ((len)+sizeof(long)-1) &amp; ~(sizeof(long)-1) ) </span></span><br></pre></td></tr></table></figure><p><code>CMSG_SPACE()</code>: 返回辅助数据及其所传递的净荷数据的总长度。即sizeof(cmsg_len) + sizeof(cmsg_level) + sizeof(cmsg_type) + len(cmsg_data)长度进行CMSG_ALIGN后的值.</p><p><code>CMSG_DATA()</code>: 返回cmsghdr的净荷数据部分</p><p><code>CMSG_LEN()</code>: 返回净荷数据长度进行CMSG_ALIGN后的值，一般赋值给cmsghdr.cmsg_len。</p><p>为了创建辅助数据，首先初始化msghdr.msg_controllen字段。 在msghdr上使用CMSG_FIRSTHDR()来获取第一个控制消息，然后使用CMSG_NXTHDR()来获取后续的控制消息。在每一个控制消息中，使用CMSG_LEN()来初始化cmsghdr.cmsg_len，使用CMSG_DATA()来初始化cmsghdr.cmsg_data部分。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;msghdr结构&quot;&gt;&lt;a href=&quot;#msghdr结构&quot; class=&quot;headerlink&quot; title=&quot;msghdr结构&quot;&gt;&lt;/a&gt;msghdr结构&lt;/h2&gt;&lt;p&gt;msghdr结构一般会用于如下两个函数中：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;sendmsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; msghdr *msg, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flags)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; msghdr *msg, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flags)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://rma-shuyu.github.io/categories/C-C/"/>
    
    
    <category term="msg_control" scheme="https://rma-shuyu.github.io/tags/msg-control/"/>
    
  </entry>
  
</feed>
